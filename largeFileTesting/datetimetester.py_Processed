S
import io
import itertools
import bisect
import copy
import decimal
import sys
import os
import pickle
import random
import re
import struct
import unittest
from array import V
from operator import V, V, V, V, V, V, V, V, V
from test import V
from test.support import V, V, V, V
import datetime as datetime_module
from datetime import V, V
from datetime import V
from datetime import V
from datetime import V
from datetime import V
from datetime import V, V
import time as _time
try:
    import _testcapi
except ImportError:
    V = None
import _strptime
V = {V.V, V.V}
V = [(V, V, V)
                  for V in range(V.V + 1)]
assert len(V) == V.V + 1
V = (10, 34.5, SSS, {}, [], ())
V = float(SSS)
V = float(SSS)
class TestModule(V.V):
    def F(self):
        V = V
        self.V(V.V, 1)
        self.V(V.V, 9999)
    def F(self):
        S
        V = dir(V)
        for V in V.V:
            self.V(V, V)
    def F(self):
        if SSS in self.__class__.__name__:
            self.V(SSS)
        V = V
        V = set(V for V in dir(V)
                    if not V.V(SSS) and not V.V(SSS))
        V = set([SSS, SSS, SSS, SSS,
                       SSS, SSS, SSS, SSS,
                       SSS, SSS])
        self.V(V - V, set([]))
    def F(self):
        if SSS in self.__class__.__name__:
            self.V(SSS)
        V = V.V
        self.V(V(-10, -3), 3)
        self.V(V(5, -2), -2)
        self.V(V(7, 3), 2)
        self.V(V(-7, 3), -2)
        self.V(V(7, -3), -2)
        self.V(V(-7, -3), 2)
        self.V(V(10, 4), 2)
        self.V(V(-10, 4), -2)
        self.V(V(10, -4), -2)
        self.V(V(-10, -4), 2)
        self.V(V(6, 4), 2)
        self.V(V(-6, 4), -2)
        self.V(V(6, -4), -2)
        self.V(V(-6, -4), 2)
class FixedOffset(V):
    def F(self, V, V, V=42):
        if isinstance(V, int):
            V = V(V=V)
        if isinstance(V, int):
            V = V(V=V)
        self.V = V
        self.V = V
        self.V = V
    def F(self):
        return self.V.V()
    def F(self, V):
        return self.V
    def F(self, V):
        return self.V
    def F(self, V):
        return self.V
class PicklableFixedOffset(V):
    def F(self, V=None, V=None, V=None):
        V.F(self, V, V, V)
    def F(self):
        return self.__dict__
class _TZInfo(V):
    def F(self, V):
        return V.V()
class TestTZInfo(V.V):
    def F(self):
        V = V()
        V = V(2014, 7, 21, 11, 32, 3, 0, V)
        with self.V(TypeError):
            V.V()
    def F(self):
        V = V()
        V = V.V
        self.V(NotImplementedError, V.V, V)
        self.V(NotImplementedError, V.V, V)
        self.V(NotImplementedError, V.V, V)
    def F(self):
        class NotEnough(V):
            def F(self, V, V):
                self.V = V
                self.V = V
        self.V(issubclass(V, V))
        V = V(3, SSS)
        self.V(V, V)
        V = V.V()
        self.V(NotImplementedError, V.V, V)
        self.V(NotImplementedError, V.V, V)
        self.V(NotImplementedError, V.V, V)
    def F(self):
        V = V(3, SSS)
        self.V(V, V)
        for V in V.V(), None:
            self.V(V.V(V), V(V=3))
            self.V(V.V(V), SSS)
            self.V(V.V(V), V(V=42))
    def F(self):
        V = V.F(V)
        self.V(type(V), V)
        for V, V, V in V:
            V = V.V(V, V)
            V = V.V(V)
            self.V(type(V), V)
    def F(self):
        V = V(V=-300)
        for V, V in [
            (V, (V, SSS)),
            (V, (V,)),
            (V, (V, SSS))]:
            V = V(*V)
            V = V.V(None)
            self.V(V, V)
            self.V(type(V), V)
            self.V(V.V(None), V)
            self.V(V.V(None), V)
            for V, V, V in V:
                V = V.V(V, V)
                V = V.V(V)
                self.V(V, V)
                self.V(type(V), V)
                self.V(V.V(None), V)
                self.V(V.V(None), V)
    def F(self):
        V = V = V(V=1)
        class UKSummerTime(V):
            S
            def F(self, V):
                return V
            def F(self, V):
                return V
            def F(self, V):
                return SSS
        V = V()
        V = V(2014, 4, 26, 12, 1, V=V)
        V = V.V(V)
        self.V(V - V.V(), V)
class TestTimeZone(V.V):
    def F(self):
        self.V = V(V(V=9.5), SSS)
        self.V = V(-V(V=5), SSS)
        self.V = V(2010, 1, 1)
    def F(self):
        for V in [self.V, self.V, V.V,
                   V.V, V.V]:
            self.V(str(V), V.V(None))
    def F(self):
        V = V
        for V in [self.V, self.V, V.V,
                   V.V, V.V]:
            V = repr(V)
            self.V(V, eval(V))
    def F(self):
        V = V(V=23, V=59)
        self.V(V.V.V(None), V)
        self.V(V.V.V(None), -V)
        self.V(V.V.V(None), V)
    def F(self):
        self.V(V.V, V(V(0)))
        self.V(V.V, V(V(0), SSS))
        self.V(V.V, V(V(0), SSS))
        for V in [V(V=1), V(V=1)]:
            V = V(V)
            self.V(V.V(None) % V(V=1), 0)
        for V in [V(1, 1), V(1)]:
            self.V(ValueError, V, V)
            self.V(ValueError, V, -V)
        with self.V(TypeError): V(None)
        with self.V(TypeError): V(42)
        with self.V(TypeError): V(V, None)
        with self.V(TypeError): V(V, 42)
        with self.V(TypeError): V(V, SSS, SSS)
    def F(self):
        self.V(V.V, V)
        self.V(self.V, V)
    def F(self):
        V = self.V
        for V in [0, 1.5, 12]:
            V = V * V
            self.V(V, V(V).V(V))
            self.V(-V, V(-V).V(V))
        with self.V(TypeError): self.V.V(SS)
        with self.V(TypeError): self.V.V(5)
    def F(self):
        self.V(V.V.V(self.V))
        with self.V(TypeError): self.V.V(SS)
        with self.V(TypeError): self.V.V(5)
    def F(self):
        self.V(SSS, V.V.V(None))
        self.V(SSS, V(V).V(None))
        self.V(SSS, V(-5 * V).V(None))
        self.V(SSS, V(9.5 * V).V(None))
        self.V(SSS, V(V(V=-1)).V(None))
        self.V(SSS, V(-5 * V, SSS).V(None))
        self.V(SSS, V(V, SSS).V(None))
        self.V(SSS, V(V(0, 4000)).V(None))
        self.V(SSS,
                         V(-V(0, 4000)).V(None))
        self.V(SSS,
                         V(V(0, 4000, 1)).V(None))
        self.V(SSS,
                         V(-V(0, 4000, 1)).V(None))
        with self.V(TypeError): self.V.V(SS)
        with self.V(TypeError): self.V.V(5)
    def F(self):
        with self.V(ValueError):
            V.V.V(self.V)
        with self.V(TypeError):
            V.V.V(SSS)
        for V in [self.V, self.V, V]:
            V = self.V.V(V=V)
            V = V.V(V)
            self.V(V - V, V.V(V))
            self.V(V,
                             self.V.V(V=V.V))
    def F(self):
        self.V(V(V), V(V))
        self.V(V(V), V(V))
        self.V(V(-5 * V), V(-5 * V, SSS))
        with self.V(TypeError): V(V) < V(V)
        self.V(V(V), {V(V)})
        self.V(V(V) != None)
        self.V(V(V) == None)
        V = V(V)
        self.V(V == V)
        self.V(V != V)
        self.V(V < V)
        self.V(V > V)
        self.V(V <= V)
        self.V(V >= V)
        self.V(V < V)
        self.V(V > V)
        self.V(V <= V)
        self.V(V >= V)
    def F(self):
        V = V(1, 1, 1)
        for V in [V.V, V.V, V.V]:
            self.V(V.V(V),
                             V.V(V=V).V())
            self.V(V.V(V),
                             V.V(V=V).V())
            self.V(V.V(V),
                             V.V(V=V).V())
    def F(self):
        for V in self.V, self.V, V.V, V.V:
            for V, V, V in V:
                V = V.V(V.V(V, V))
                self.V(V, V)
        V = V.V
        for V, V, V in V:
            V = V.V(V.V(V, V))
            self.V(V, V)
    def F(self):
        for V in self.V, self.V, V.V, V.V:
            V = V.V(V)
            self.V(V, V)
        V = V.V
        V = V.V(V)
        self.V(V, V)
    def F(self):
        for V in self.V, self.V, V.V, V.V:
            V = V.V(V)
            self.V(V, V)
        V = V.V
        V = V.V(V)
        self.V(V, V)
    def F(self):
        V = [
            V(V=23, V=59),
            V(V=23, V=59, V=59),
            V(V=23, V=59, V=59, V=999999),
        ]
        V.V([-V for V in V])
        for V in V:
            with self.V(V=SSS, V=V):
                V(V)
        V = [
            V(V=24),
            V(V=24, V=1),
        ]
        V.V([-V for V in V])
        for V in V:
            with self.V(V=SSS, V=V):
                with self.V(ValueError):
                    V(V)
    def F(self):
        self.V(V.V, V())
        self.V(V(V(V=1)), V())
class HarmlessMixedComparison:
    def F(self):
        V = self.V(1, 1, 1)
        self.V(V == ())
        self.V(V != ())
        self.V(() == V)
        self.V(() != V)
        self.V(V, [1, 20, [], V])
        self.V([], [V, 1, 20, []])
        self.V(V == V)
        self.V(V != V)
        self.V(V < V)
        self.V(V > V)
        self.V(V <= V)
        self.V(V >= V)
        self.V(V < V)
        self.V(V > V)
        self.V(V <= V)
        self.V(V >= V)
    def F(self):
        V = self.V(1, 1, 1)
        self.V(TypeError, lambda: V < ())
        self.V(TypeError, lambda: V <= ())
        self.V(TypeError, lambda: V > ())
        self.V(TypeError, lambda: V >= ())
        self.V(TypeError, lambda: () < V)
        self.V(TypeError, lambda: () <= V)
        self.V(TypeError, lambda: () > V)
        self.V(TypeError, lambda: () >= V)
class TestTimeDelta(V, V.V):
    V = V
    def F(self):
        V = self.V
        V = V
        V(V(), V(V=0, V=0, V=0, V=0, V=0,
                    V=0, V=0))
        V(V(1), V(V=1))
        V(V(0, 1), V(V=1))
        V(V(0, 0, 1), V(V=1))
        V(V(V=1), V(V=7))
        V(V(V=1), V(V=24))
        V(V(V=1), V(V=60))
        V(V(V=1), V(V=60))
        V(V(V=1), V(V=1000))
        V(V(V=1), V(V=1000))
        V(V(V=1.0/7), V(V=1))
        V(V(V=1.0/24), V(V=1))
        V(V(V=1.0/60), V(V=1))
        V(V(V=1.0/60), V(V=1))
        V(V(V=0.001), V(V=1))
        V(V(V=0.001), V(V=1))
    def F(self):
        V = self.V
        V = V
        V = V(7) 
        V = V(0, 60) 
        V = V(0, 0, 1000) 
        V(V+V+V, V(7, 60, 1000))
        V(V-V, V(6, 24*3600 - 60))
        V(V.F(V), V(6, 24*3600 - 60))
        V(-V, V(-7))
        V(+V, V(7))
        V(-V, V(-1, 24*3600 - 60))
        V(-V, V(-1, 24*3600 - 1, 999000))
        V(abs(V), V)
        V(abs(-V), V)
        V(V(6, 24*3600), V)
        V(V(0, 0, 60*1000000), V)
        V(V*10, V(70))
        V(V*10, 10*V)
        V(V*10, 10*V)
        V(V*10, V(0, 600))
        V(10*V, V(0, 600))
        V(V*10, V(0, 600))
        V(V*10, V(0, 0, 10000))
        V(10*V, V(0, 0, 10000))
        V(V*10, V(0, 0, 10000))
        V(V*-1, -V)
        V(V*-2, -V-V)
        V(V*-2, -V+-V)
        V(V*(60*24), (V*60)*24)
        V(V*(60*24), (60*V)*24)
        V(V*1000, V(0, 1))
        V(1000*V, V(0, 1))
        V(V//7, V(1))
        V(V//10, V(0, 6))
        V(V//1000, V(0, 0, 1))
        V(V//10, V(0, 7*24*360))
        V(V//3600000, V(0, 0, 7*24*1000))
        V(V/0.5, V(14))
        V(V/0.5, V(0, 120))
        V(V/7, V(1))
        V(V/10, V(0, 6))
        V(V/1000, V(0, 0, 1))
        V(V/10, V(0, 7*24*360))
        V(V/3600000, V(0, 0, 7*24*1000))
        V = V(V=1)
        V((3*V) * 0.5, 2*V)
        V((5*V) * 0.5, 2*V)
        V(0.5 * (3*V), 2*V)
        V(0.5 * (5*V), 2*V)
        V((-3*V) * 0.5, -2*V)
        V((-5*V) * 0.5, -2*V)
        V(V(V=1) * 0.123456, V(V=123456))
        V(V(V=1) * 0.6112295, V(V=611229))
        V((3*V) / 2, 2*V)
        V((5*V) / 2, 2*V)
        V((-3*V) / 2.0, -2*V)
        V((-5*V) / 2.0, -2*V)
        V((3*V) / -2, -2*V)
        V((5*V) / -2, -2*V)
        V((3*V) / -2.0, -2*V)
        V((5*V) / -2.0, -2*V)
        for V in range(-10, 10):
            V((V*V/3)//V, round(V/3))
        for V in range(-10, 10):
            V((V*V/-3)//V, round(V/-3))
        V(V(V=1) / (1 / 0.6112295), V(V=611229))
        V(V(999999999, 86399, 999999) - V(999999999, 86399, 999998),
           V(0, 0, 1))
        V(V(999999999, 1, 1) - V(999999999, 1, 0),
           V(0, 0, 1))
    def F(self):
        V = V(42)
        for V in 1, 1.0:
            self.V(TypeError, lambda: V+V)
            self.V(TypeError, lambda: V-V)
            self.V(TypeError, lambda: V+V)
            self.V(TypeError, lambda: V-V)
        V = 0
        self.V(TypeError, lambda: V // V)
        self.V(ZeroDivisionError, lambda: V // V)
        self.V(ZeroDivisionError, lambda: V / V)
        self.V(ZeroDivisionError, lambda: V / 0.0)
        self.V(TypeError, lambda: V / SS)
    @support.V
    def F(self):
        V = V(42)
        self.V(ValueError, V.F, V)
        self.V(ValueError, V.F, V)
    def F(self):
        V, V, V = 1, 7, 31
        V = V(V, V, V)
        self.V(V.V, V)
        self.V(V.V, V)
        self.V(V.V, V)
    def F(self):
        V = V(V=365)
        self.V(V.V(), 31536000.0)
        for V in [123456.789012, -123456.789012, 0.123456, 0, 1e6]:
            V = V(V=V)
            self.V(V.V(), V)
        for V in [-1, -2, -123]:
            V = V(V=V)
            self.V(V.V(), V / V(V=1))
    def F(self):
        V = V(V=100,
                       V=-7,
                       V=-24*(100-49),
                       V=-3,
                       V=12,
                       V=(3*60 - 12) * 1e6 + 1)
        V = V(V=1)
        self.V(V, V)
    def F(self):
        V = V(V=100,
                       V=-7,
                       V=-24*(100-49),
                       V=-3,
                       V=12,
                       V=(3*60 - 12) * 1000000)
        V = V()
        self.V(hash(V), hash(V))
        V += V(V=7)
        V += V(V=7*7)
        self.V(V, V)
        self.V(hash(V), hash(V))
        V = {V: 1}
        V[V] = 2
        self.V(len(V), 1)
        self.V(V[V], 2)
    def F(self):
        V = 12, 34, 56
        V = V(*V)
        for V, V, V in V:
            V = V.V(V, V)
            V = V.V(V)
            self.V(V, V)
    def F(self):
        V = V(2, 3, 4)
        V = V(2, 3, 4)
        self.V(V, V)
        self.V(V <= V)
        self.V(V >= V)
        self.V(V != V)
        self.V(V < V)
        self.V(V > V)
        for V in (3, 3, 3), (2, 4, 4), (2, 3, 5):
            V = V(*V)   
            self.V(V < V)
            self.V(V > V)
            self.V(V <= V)
            self.V(V >= V)
            self.V(V != V)
            self.V(V != V)
            self.V(V == V)
            self.V(V == V)
            self.V(V > V)
            self.V(V < V)
            self.V(V >= V)
            self.V(V <= V)
        for V in V:
            self.V(V == V, False)
            self.V(V != V, True)
            self.V(V == V, False)
            self.V(V != V, True)
            self.V(TypeError, lambda: V <= V)
            self.V(TypeError, lambda: V < V)
            self.V(TypeError, lambda: V > V)
            self.V(TypeError, lambda: V >= V)
            self.V(TypeError, lambda: V <= V)
            self.V(TypeError, lambda: V < V)
            self.V(TypeError, lambda: V > V)
            self.V(TypeError, lambda: V >= V)
    def F(self):
        V = V
        V = self.V
        V(str(V(1)), SSS)
        V(str(V(-1)), SSS)
        V(str(V(2)), SSS)
        V(str(V(-2)), SSS)
        V(str(V(V=12, V=58, V=59)), SSS)
        V(str(V(V=2, V=3, V=4)), SSS)
        V(str(V(V=-30, V=23, V=12, V=34)),
           SSS)
        V(str(V(V=1)), SSS)
        V(str(V(V=3)), SSS)
        V(str(V(V=999999999, V=23, V=59, V=59,
                   V=999999)),
           SSS)
    def F(self):
        V = SSS + self.V.__name__
        self.V(repr(self.V(1)),
                         SSSS % V)
        self.V(repr(self.V(10, 2)),
                         SSSS % V)
        self.V(repr(self.V(-10, 2, 400000)),
                         SSSS % V)
        self.V(repr(self.V(V=60)),
                         SSSS % V)
        self.V(repr(self.V()),
                         SSSS % V)
        self.V(repr(self.V(V=100)),
                         SSSS % V)
        self.V(repr(self.V(V=1, V=100)),
                         SSSS % V)
        self.V(repr(self.V(V=1, V=100)),
                         SSSS % V)
    def F(self):
        for V in (V(V=999999999, V=23, V=59,
                             V=59, V=999999),
                   V(V=-999999999),
                   V(V=-999999999, V=1),
                   V(V=1, V=2, V=3)):
            V = repr(V)
            self.V(V.V(SSS))
            V = V[9:]
            V = eval(V)
            self.V(V, V)
            V = V(V.V, V.V, V.V)
            self.V(V, V)
    def F(self):
        self.V(V.V, V)
        self.V(V.V, V)
        self.V(V.V, V)
        self.V(V.V > V.V)
        self.V(V.V, V(-999999999))
        self.V(V.V, V(999999999, 24*3600-1, 1e6-1))
        self.V(V.V, V(0, 0, 1))
    def F(self):
        V = V.V
        V = V.V + V
        V -= V  
        self.V(OverflowError, V.F, V)
        self.V(OverflowError, V.F, -V)
        V = V.V - V
        V += V  
        self.V(OverflowError, V.F, V)
        self.V(OverflowError, V.F, -V)
        self.V(OverflowError, lambda: -V.V)
        V = V(1)
        self.V(OverflowError, V.F, 10**9)
        self.V(OverflowError, V.F, 1e9)
        self.V(OverflowError, V.F, 1e-20)
        self.V(OverflowError, V.F, 1e-10)
        self.V(OverflowError, V.F, 9e-10)
    @support.V
    def F(self):
        V = V(1)
        self.V(OverflowError, V.F, V)
        self.V(OverflowError, V.F, -V)
    def F(self):
        V = V
        V = self.V
        V(V(V=0.4/1000), V(0))    
        V(V(V=-0.4/1000), V(0))    
        V(V(V=0.5/1000), V(V=0))
        V(V(V=-0.5/1000), V(V=-0))
        V(V(V=0.6/1000), V(V=1))
        V(V(V=-0.6/1000), V(V=-1))
        V(V(V=1.5/1000), V(V=2))
        V(V(V=-1.5/1000), V(V=-2))
        V(V(V=0.5/10**6), V(V=0))
        V(V(V=-0.5/10**6), V(V=-0))
        V(V(V=1/2**7), V(V=7812))
        V(V(V=-1/2**7), V(V=-7812))
        V = 3600e6
        V = V * 24
        V(V(V=.4/V), V(0))
        V(V(V=.2/V), V(0))
        V(V(V=.4/V, V=.2/V), V(V=1))
        V(V(V=-.4/V), V(0))
        V(V(V=-.2/V), V(0))
        V(V(V=-.4/V, V=-.2/V), V(V=-1))
        V(V(V=0.5), 0.5*V(V=1.0))
        V(V(V=0.5)//V.V, 0.5*V.V//V.V)
    def F(self):
        V = V(V=-1)
        self.V((V.V, V.V, V.V),
                         (-1, 24*3600-1, 999999))
    def F(self):
        self.V(V(1))
        self.V(V(0, 1))
        self.V(V(0, 0, 1))
        self.V(V(V=1))
        self.V(V(0))
    def F(self):
        class T(V):
            @staticmethod
            def F(V):
                return V(V.V, V.V, V.V)
            def F(self):
                sum = (self.V * 24 +
                       self.V / 3600.0 +
                       self.V / 3600e6)
                return round(sum)
        V = V(V=1)
        self.V(type(V), V)
        self.V(V.V(), 24)
        V = V(V=-1, V=-3600)
        self.V(type(V), V)
        self.V(V.V(), -25)
        V = V + V
        self.V(type(V), V)
        V = V.V(V)
        self.V(type(V), V)
        self.V(V.V, V.V)
        self.V(V.V, V.V)
        self.V(V.V, V.V)
        self.V(str(V), str(V))
        self.V(V.V(), -1)
    def F(self):
        class DateSubclass(V):
            pass
        V = V(2018, 1, 5)
        V = V(V=1)
        V = [
            (SSS, lambda V, V: V + V, V(2018, 1, 6)),
            (SSS, lambda V, V: V + V, V(2018, 1, 6)),
            (SSS, lambda V, V: V - V, V(2018, 1, 4)),
        ]
        for V, V, V in V:
            with self.V(V):
                V = V(V, V)
                self.V(V, V)
                self.V(V, V)
    def F(self):
        class DateTimeSubclass(V):
            pass
        V = V(2018, 1, 5, 12, 30)
        V = V(V=1, V=30)
        V = [
            (SSS, lambda V, V: V + V, V(2018, 1, 6, 13)),
            (SSS, lambda V, V: V + V, V(2018, 1, 6, 13)),
            (SSS, lambda V, V: V - V, V(2018, 1, 4, 12)),
        ]
        for V, V, V in V:
            with self.V(V):
                V = V(V, V)
                self.V(V, V)
                self.V(V, V)
    def F(self):
        V = V(V=1, V=24, V=19)
        V = V(V=1)
        self.V(V / V, 5059.0)
        self.V(V // V, 5059)
        V = V(V=2, V=30)
        V = V(V=1)
        self.V(V / V, 2.5)
        self.V(V // V, 2)
        V = V(0)
        self.V(ZeroDivisionError, V, V, V)
        self.V(ZeroDivisionError, V, V, V)
    def F(self):
        V = V(V=2, V=30)
        V = V(V=1)
        V = V % V
        self.V(V, V(V=30))
        V = V(V=-2, V=30)
        V = V %  V
        self.V(V, V(V=30))
        V = V(0)
        self.V(ZeroDivisionError, V, V, V)
        self.V(TypeError, V, V, 10)
    def F(self):
        V = V(V=2, V=30)
        V = V(V=1)
        V, V = divmod(V, V)
        self.V(V, 2)
        self.V(V, V(V=30))
        V = V(V=-2, V=30)
        V, V = divmod(V, V)
        self.V(V, -2)
        self.V(V, V(V=30))
        V = V(0)
        self.V(ZeroDivisionError, divmod, V, V)
        self.V(TypeError, divmod, V, 10)
    def F(self):
        def F(V):
            class BadFloat(float):
                def F(self):
                    return V
            return V()
        with self.V(TypeError):
            V() / V(1 << 1000)
        with self.V(TypeError):
            V() * V(1 << 1000)
        for V in [(), (42, ), (1, 2, 3)]:
            with self.V(ValueError):
                V() / V(V)
            with self.V(ValueError):
                V() * V(V)
    def F(self):
        class BadInt(int):
            def F(self, V):
                return V()
            def F(self, V):
                return V()
            def F(self, V):
                return V()
            def F(self, V):
                return V()
        class Prod:
            def F(self, V):
                return V()
            def F(self, V):
                return V()
        class Sum(int):
            def F(self, V):
                return V
        for V in [None, (), (0, 1, 2), (0, -1)]:
            with self.V(V=V):
                try:
                    V(V=V(1))
                except TypeError:
                    pass
                try:
                    V(V=V(1))
                except TypeError:
                    pass
                try:
                    V(V=V(1))
                except (TypeError, ValueError):
                    pass
                try:
                    V(1) * V(1)
                except (TypeError, ValueError):
                    pass
                try:
                    V(1) * V(1)
                except TypeError:
                    pass
                try:
                    V(1) // V(1)
                except TypeError:
                    pass
class TestDateOnly(V.V):
    def F(self):
        V = V(2000, 1, 2)
        V = V(V=1, V=2, V=3, V=4,
                          V=5)
        V = V(V.V)
        self.V(V, V(1))
        V = V + V
        self.V(V, V + V)
        V = V + V
        self.V(V, V + V)
        V = V - V
        self.V(V, V - V)
        V = -V
        V = V(V.V)
        self.V(V, V(-2))
        V = V + V
        self.V(V, V + V)
        V = V + V
        self.V(V, V + V)
        V = V - V
        self.V(V, V - V)
class SubclassDate(V):
    V = 1
class TestDate(V, V.V):
    V = V
    def F(self):
        V = self.V(2002, 3, 1)
        self.V(V.V, 2002)
        self.V(V.V, 3)
        self.V(V.V, 1)
    def F(self):
        for V in (self.V(1, 2, 3),
                   self.V.V()):
            V = repr(V)
            self.V(V.V(SSS))
            V = V[9:]
            V = eval(V)
            self.V(V, V)
            V = self.V(V.V, V.V, V.V)
            self.V(V, V)
    def F(self):
        for V, V, V, V in [(1, 1, 1, 1),      
                           (1, 12, 31, 365),
                           (2, 1, 1, 366),
                           (1945, 11, 12, 710347)]:
            V = self.V(V, V, V)
            self.V(V, V.V())
            V = self.V.V(V)
            self.V(V, V)
            if hasattr(V, SSS):
                self.V(V.V, 0)
                self.V(V.V, 0)
                self.V(V.V, 0)
                self.V(V.V, 0)
        for V in range(V, V+1, 7):
            V = self.V(V, 1, 1)
            V = V.V()
            V = self.V.V(V)
            self.V(V, V)
            if V > 1:
                V = self.V.V(V-1)
                V = self.V(V-1, 12, 31)
                self.V(V, V)
                self.V(V.V(), V-1)
        V = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
        for V, V in (2000, True), (2002, False):
            V = self.V(V, 1, 1).V()
            for V, V in zip(range(1, 13), V):
                if V == 2 and V:
                    V += 1
                for V in range(1, V+1):
                    V = self.V(V, V, V)
                    self.V(V.V(), V)
                    self.V(V, self.V.V(V))
                    V += 1
    def F(self):
        V = self.V.V
        V = self.V(V.V, V.V, V.V)  
        V = V.V()
        V = V.V(V)
        self.V(V, V)
        self.V(ValueError, lambda: V.V(V - 1))
        V = V + V(V=1)
        self.V(V.V(), V + 1)
        self.V(V, self.V.V(V + 1))
        V = self.V.V
        V = self.V(V.V, V.V, V.V)  
        V = V.V()
        V = V.V(V)
        self.V(V, V)
        self.V(ValueError, lambda: V.V(V + 1))
        V = V - V(V=1)
        self.V(V.V(), V - 1)
        self.V(V, self.V.V(V - 1))
    def F(self):
        self.V(V, 1, 1)  
        self.V(V, 1, 1)  
        self.V(ValueError, self.V, V-1, 1, 1)
        self.V(ValueError, self.V, V+1, 1, 1)
        self.V(2000, 1, 1)    
        self.V(2000, 12, 1)   
        self.V(ValueError, self.V, 2000, 0, 1)
        self.V(ValueError, self.V, 2000, 13, 1)
        self.V(2000, 2, 29)   
        self.V(2004, 2, 29)   
        self.V(2400, 2, 29)   
        self.V(ValueError, self.V, 2000, 2, 30)
        self.V(ValueError, self.V, 2001, 2, 29)
        self.V(ValueError, self.V, 2100, 2, 29)
        self.V(ValueError, self.V, 1900, 2, 29)
        self.V(ValueError, self.V, 2000, 1, 0)
        self.V(ValueError, self.V, 2000, 1, 32)
    def F(self):
        V = self.V(2000, 12, 31)
        V = self.V(2000, 12, 31)
        self.V(V, V)
        self.V(hash(V), hash(V))
        V = {V: 1}
        V[V] = 2
        self.V(len(V), 1)
        self.V(V[V], 2)
        self.V(V[V], 2)
        V = self.V(2001,  1,  1)
        V = self.V(2001,  1,  1)
        self.V(V, V)
        self.V(hash(V), hash(V))
        V = {V: 1}
        V[V] = 2
        self.V(len(V), 1)
        self.V(V[V], 2)
        self.V(V[V], 2)
    def F(self):
        V = self.V(2002, 1, 31)
        V = self.V(1956, 1, 31)
        V = self.V(2001,2,1)
        V = V-V
        self.V(V.V, 46*365 + len(range(1956, 2002, 4)))
        self.V(V.V, 0)
        self.V(V.V, 0)
        V = V(1)
        V = V(7)
        V = self.V(2002, 3, 2)
        self.V(V + V, self.V(2002, 3, 3))
        self.V(V + V, self.V(2002, 3, 3))
        self.V(V - V, self.V(2002, 3, 1))
        self.V(-V + V, self.V(2002, 3, 1))
        self.V(V + V, self.V(2002, 3, 9))
        self.V(V - V, self.V(2002, 2, 23))
        self.V(V + 52*V, self.V(2003, 3, 1))
        self.V(V - 52*V, self.V(2001, 3, 3))
        self.V((V + V) - V, V)
        self.V((V + V) - V, V)
        self.V((V - V) - V, -V)
        self.V((V - V) - V, -V)
        self.V(V - (V + V), -V)
        self.V(V - (V + V), -V)
        self.V(V - (V - V), V)
        self.V(V - (V - V), V)
        self.V(V - (V - V), V)
        for V in 1, 1.0:
            self.V(TypeError, lambda: V+V)
            self.V(TypeError, lambda: V-V)
            self.V(TypeError, lambda: V+V)
            self.V(TypeError, lambda: V-V)
        self.V(TypeError, lambda: V - V)
        self.V(TypeError, lambda: V * V)
        self.V(TypeError, lambda: V * V)
        self.V(TypeError, lambda: V // V)
        self.V(TypeError, lambda: V // V)
        self.V(TypeError, lambda: V * V)
        self.V(TypeError, lambda: V // V)
        self.V(TypeError, lambda: V + V)
    def F(self):
        V = self.V.V
        for V in [V, V(1), V(2)]:
            V = self.V.V + V
            V -= V  
            self.V(OverflowError, V.F, V)
            self.V(OverflowError, V.F, -V)
            V = self.V.V - V
            V += V  
            self.V(OverflowError, V.F, V)
            self.V(OverflowError, V.F, -V)
    def F(self):
        import time
        V, V, V = 1999, 9, 19
        V = V.V((V, V, V, 0, 0, 0, 0, 0, -1))
        V = self.V.V(V)
        self.V(V.V, V)
        self.V(V.V, V)
        self.V(V.V, V)
    def F(self):
        for V in -1e200, 1e200:
            self.V(OverflowError, self.V.V,
                              V)
    def F(self):
        import time
        for V in range(3):
            V = self.V.V()
            V = V.V()
            V = self.V.V(V)
            if V == V:
                break
            V.V(0.1)
        if V != V:
            self.V(V, V,
                                   V=V(V=0.5))
    def F(self):
        for V in range(7):
            self.V(self.V(2002, 3, 4+V).V(), V)
            self.V(self.V(2002, 3, 4+V).V(), V+1)
            self.V(self.V(1956, 1, 2+V).V(), V)
            self.V(self.V(1956, 1, 2+V).V(), V+1)
    def F(self):
        V = [
                ((2003, 12, 22), (2003, 52, 1)),
                ((2003, 12, 29), (2004, 1, 1)),
                ((2004, 1, 5), (2004, 2, 1)),
                ((2009, 12, 21), (2009, 52, 1)),
                ((2009, 12, 28), (2009, 53, 1)),
                ((2010, 1, 4), (2010, 1, 1)),
        ]
        V = []
        for V, V in V:
            V = self.V(*V)
            for V in range(7):
                V = V + V(V)
                V = V[0:2] + (V[2] + V,)
                V.V((V, V))
        for V, V in V:
            with self.V(V=V, V=SSS):
                self.V(V.V(), V)
            with self.V(V=V, V=SSS):
                V = V.V()
                self.V((V.V, V.V, V.V), V)
    def F(self):
        S
        V = self.V(2019, 1, 1)
        V = V.V(V.V())
        V = V.V(V)
        self.V(type(V), tuple)
        self.V(V, (2019, 1, 2))
    def F(self):
        V = SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
        V = sorted(map(int, V.V()))
        V = []
        for V in range(400):
            V = self.V(2000+V, 12, 31)
            V = self.V(1600+V, 12, 31)
            self.V(V.V()[1:], V.V()[1:])
            if V.V()[1] == 53:
                V.V(V)
        self.V(V, V)
    def F(self):
        V = self.V(2, 3, 2)
        self.V(V.V(), SSS)
    def F(self):
        V = self.V(2002, 3, 2)
        self.V(V.V(), SSS)
    def F(self):
        V = self.V(2005, 3, 2)
        self.V(V.V(SSSSSSSSS), SSS)
        self.V(V.V(SS), SS) 
        self.V(V.V(SSS*1000), SSS*1000) 
        self.V(TypeError, V.V) 
        self.V(TypeError, V.V, SSS, SSS) 
        self.V(TypeError, V.V, 42) 
        self.V(V.V(SSSS), SSS)
        self.V(V.V(SSSSSSSSSSS), SSSSSSS)
        for V in [SSS, SSS, SSSS]:
            try:
                V.V(V)
            except ValueError:
                pass
        try:
            V.V(SSSSSSS)
        except UnicodeEncodeError:
            pass
        V.V(SSS)
    def F(self):
        V = self.V(2005, 3, 2)
        try:
            V.V(SSS)
        except ValueError:
            self.V(SSSS)
        self.V(V.V(SSS), V.V(SSS, V.V()))
        self.V(
            V.V(SSSSSSSSSS),
            V.V(SSSS, V.V()),
        )
    def F(self):
        V = self.V(2007, 9, 10)
        self.V(V.F(SS), str(V))
        with self.V(TypeError, SSS):
            V.F(123)
        class A(self.V):
            def F(self):
                return SSS
        V = V(2007, 9, 10)
        self.V(V.F(SS), SSS)
        class B(self.V):
            def F(self, V):
                return SSS
        V = V(2007, 9, 10)
        self.V(V.F(SS), str(V))
        for V in [SSSSSSSSS,
                    SSSSSSSSSSSSSSS,
                    SSSSSS,
                    ]:
            self.V(V.F(V), V.V(V))
            self.V(V.F(V), V.V(V))
            self.V(V.F(V), SSS)
    def F(self):
        if issubclass(self.V, V):
            V = V
        else:
            V = V
        self.V(self.V.V, V)
        self.V(self.V.V, V)
        self.V(self.V.V, V)
        self.V(self.V.V > self.V.V)
    def F(self):
        V = self.V.V - self.V.V
        V = (V.V*24*3600 + V.V)*1000000 + V.V
        V = V(0, 0, V)
        self.V(V, V)
        self.V(self.V.V + V, self.V.V)
        self.V(self.V.V - V, self.V.V)
    def F(self):
        for V in range(7):
            V = self.V(1956, 1, 2+V)
            V = V.V()
            self.V(V, (1956, 1, 2+V, 0, 0, 0, V, 2+V, -1))
            V = self.V(1956, 2, 1+V)
            V = V.V()
            self.V(V, (1956, 2, 1+V, 0, 0, 0, (2+V)%7, 32+V, -1))
            V = self.V(1956, 3, 1+V)
            V = V.V()
            self.V(V, (1956, 3, 1+V, 0, 0, 0, (3+V)%7, 61+V, -1))
            self.V(V.V, 1956)
            self.V(V.V, 3)
            self.V(V.V, 1+V)
            self.V(V.V, 0)
            self.V(V.V, 0)
            self.V(V.V, 0)
            self.V(V.V, (3+V)%7)
            self.V(V.V, 61+V)
            self.V(V.V, -1)
    def F(self):
        V = 6, 7, 23
        V = self.V(*V)
        for V, V, V in V:
            V = V.V(V, V)
            V = V.V(V)
            self.V(V, V)
        self.V(V.V(), V.V(2))
    def F(self):
        V = [
            SSSSSSSSSSSSSSSSSSSS,
            SSSSSSSSSSSSSS,
            SSSSSSSSSSSSSSSSS,
        ]
        V = 2015, 11, 27
        V = self.V(*V)
        for V in V:
            for V in V:
                V = V(V, V=SSS)
                self.V(V, V)
    def F(self):
        V = self.V(2, 3, 4)
        V = self.V(2, 3, 4)
        self.V(V, V)
        self.V(V <= V)
        self.V(V >= V)
        self.V(V != V)
        self.V(V < V)
        self.V(V > V)
        for V in (3, 3, 3), (2, 4, 4), (2, 3, 5):
            V = self.V(*V)   
            self.V(V < V)
            self.V(V > V)
            self.V(V <= V)
            self.V(V >= V)
            self.V(V != V)
            self.V(V != V)
            self.V(V == V)
            self.V(V == V)
            self.V(V > V)
            self.V(V < V)
            self.V(V >= V)
            self.V(V <= V)
        for V in V:
            self.V(V == V, False)
            self.V(V != V, True)
            self.V(V == V, False)
            self.V(V != V, True)
            self.V(TypeError, lambda: V < V)
            self.V(TypeError, lambda: V > V)
            self.V(TypeError, lambda: V >= V)
            self.V(TypeError, lambda: V <= V)
            self.V(TypeError, lambda: V < V)
            self.V(TypeError, lambda: V > V)
            self.V(TypeError, lambda: V >= V)
    def F(self):
        V = self.V(2000, 4, 5)
        self.V(V == 1, False)
        self.V(1 == V, False)
        self.V(V != 1, True)
        self.V(1 != V, True)
        self.V(TypeError, lambda: V < 1)
        self.V(TypeError, lambda: 1 < V)
        class SomeClass:
            pass
        V = V()
        self.V(V == V, False)
        self.V(V == V, False)
        self.V(V != V, True)
        self.V(V != V, True)
        self.V(TypeError, lambda: V < V)
        self.V(TypeError, lambda: V < V)
    def F(self):
        self.V(self.V.V)
        self.V(self.V.V)
    def F(self):
        for V in (1, 49, 70, 99, 100, 999, 1000, 1970):
            V = self.V(V, 1, 1)
            if V.V(SSSS) != SSS % V:
                self.V(V.V(SSSS), SSS % V)
                self.V(V.V(SSSS), SSS % V)
    def F(self):
        cls = self.V
        V = [1, 2, 3]
        V = cls(*V)
        self.V(V, V.V())
        V = 0
        for V, V in ((SSS, 2),
                             (SSS, 3),
                             (SSS, 4)):
            V = V[:]
            V[V] = V
            V = cls(*V)
            V = V.V(**{V: V})
            self.V(V, V)
            V += 1
        V = cls(2000, 2, 29)
        self.V(ValueError, V.V, V=2001)
    def F(self):
        class DateSubclass(self.V):
            pass
        V = V(2012, 1, 1)
        self.V(type(V.V(V=2013)), V)
    def F(self):
        class C(self.V):
            V = 42
            def F(cls, *V, **V):
                V = V.V()
                V = V.V(SSS)
                V = self.V.F(cls, *V, **V)
                V.V = V
                return V
            def F(self, V):
                return V + self.V + self.V
        V = 2003, 4, 14
        V = self.V(*V)
        V = V(*V, **{SSS: 7})
        self.V(V.__class__, V)
        self.V(V.V, 42)
        self.V(V.V, 7)
        self.V(V.V(), V.V())
        self.V(V.V(-7), V.V + V.V - 7)
    def F(self):
        class DateSubclass(self.V):
            def F(cls, *V, **V):
                V = self.V.F(cls, *V, **V)
                V.V = 7
                return V
        V = (2003, 4, 14)
        V = 731319              
        V = SSS  
        V = V(*V)
        self.V(V, V)
        self.V(V.V, 7)
        V = V.V(V, V(0)).V()
        V = [
            (SSS, (V,)),
            (SSS, (V,)),
            (SSS, (V,)),
        ]
        for V, V in V:
            for V in (V, V):
                with self.V(V=type(V),
                                  V=V):
                    V = getattr(V, V)
                    V = V(*V)
                    self.V(V, V)
                    self.V(V, V)
                    self.V(V.V, 7)
    def F(self):
        V = 6, 7, 23
        V = V(*V)
        for V, V, V in V:
            V = V.V(V, V)
            V = V.V(V)
            self.V(V, V)
            self.V(isinstance(V, V))
    def F(self):
        V = SSSS
        if not issubclass(self.V, V):
            V = V[:4]
        for V in SSSS, SSSS, SSSS, SSSS:
            self.V(TypeError, self.V,
                                         V[:2] + V + V[3:])
        if issubclass(self.V, V):
            with self.V(TypeError, SSS):
                self.V(bytes([1] * len(V)), SSS)
        for V in range(1, 13):
            self.V(V[:2] + bytes([V]) + V[3:])
    def F(self):
        V = [
            (1, 1, 1),
            (1000, 2, 14),
            (1900, 1, 1),
            (2000, 2, 29),
            (2004, 11, 12),
            (2004, 4, 3),
            (2017, 5, 30)
        ]
        for V in V:
            V = self.V(*V)
            V = V.V()
            with self.V(V=V):
                V = self.V.V(V.V())
                self.V(V, V)
    def F(self):
        class DateSubclass(self.V):
            pass
        V = V(2014, 12, 14)
        V = V.V(V.V())
        self.V(V, V)
    def F(self):
        V = [
            SS,                 
            SSS,           
            SSS,        
            SSS,        
            SSS,       
            SSS,       
            SSS,       
            SSS,       
            SSS,       
            SSS,         
            SSSSSSS,     
        ]
        for V in V:
            with self.V(ValueError):
                self.V.V(V)
    def F(self):
        import io
        V = [SSSS, None, V.V(SSS)]
        for V in V:
            with self.V(TypeError):
                self.V.V(V)
    def F(self):
        V = [
            (2016, 4, 3),
            (2005, 1, 2),       
            (2008, 12, 30),     
            (2010, 1, 2),       
            (2009, 12, 31),     
            (1900, 1, 1),       
            (1900, 12, 31),
            (2000, 1, 1),       
            (2000, 12, 31),
            (2004, 1, 1),       
            (2004, 12, 31),
            (1, 1, 1),
            (9999, 12, 31),
            (V, 1, 1),
            (V, 12, 31),
        ]
        for V in V:
            with self.V(V=V):
                V = self.V(*V)
                V = V.V()
                V = self.V.V(*V)
                self.V(V, V)
    def F(self):
        V = [
            (2019, 0, 1),
            (2019, -1, 1),
            (2019, 54, 1),
            (2019, 1, 0),
            (2019, 1, -1),
            (2019, 1, 8),
            (2019, 53, 1),
            (10000, 1, 1),
            (0, 1, 1),
            (9999999, 1, 1),
            (2<<32, 1, 1),
            (2019, 2<<32, 1),
            (2019, 1, 2<<32),
        ]
        for V in V:
            with self.V(V=V):
                with self.V(ValueError):
                    self.V.V(*V)
    def F(self):
        V = [
            str,
            float,
            lambda V: None,
        ]
        V = []
        V = (2019, 1, 1)
        for V in range(3):
            for V in V:
                V = list(V)
                V[V] = V(V[V])
                V.V(tuple(V))
        for V in V:
            with self.V(V=V):
                with self.V(TypeError):
                    self.V.V(*V)
class SubclassDatetime(V):
    V = 1
class TestDateTime(V):
    V = V
    def F(self):
        V = self.V(2002, 3, 1, 12, 0)
        self.V(V.V, 2002)
        self.V(V.V, 3)
        self.V(V.V, 1)
        self.V(V.V, 12)
        self.V(V.V, 0)
        self.V(V.V, 0)
        self.V(V.V, 0)
    def F(self):
        V = self.V(2002, 3, 1, 12, 59, 59, 8000)
        self.V(V.V, 2002)
        self.V(V.V, 3)
        self.V(V.V, 1)
        self.V(V.V, 12)
        self.V(V.V, 59)
        self.V(V.V, 59)
        self.V(V.V, 8000)
    def F(self):
        for V in (self.V(1, 2, 3, 4, 5, 6, 7),
                   self.V.V()):
            V = repr(V)
            self.V(V.V(SSS))
            V = V[9:]
            V = eval(V)
            self.V(V, V)
            V = self.V(V.V, V.V, V.V,
                                V.V, V.V, V.V,
                                V.V)
            self.V(V, V)
    def F(self):
        V = self.V(1, 2, 3, 4, 5, 1, 123)
        self.V(V.V(),    SSS)
        self.V(V.V(SSS), SSS)
        self.V(V.V(SSS), SSS)
        self.V(V.V(SSS), SSSSS)
        self.V(V.V(SSS),
                         SSSSS)
        self.V(V.V(V=SSS), SSS)
        self.V(V.V(V=SSS), SSS)
        self.V(V.V(V=SSS), SSS)
        self.V(V.V(V=SSS), SSS)
        self.V(V.V(V=SSS), SSS)
        self.V(V.V(V=SSS), SSS)
        self.V(V.V(V=SSS, V=SSS), SSS)
        self.V(ValueError, V.V, V=SSS)
        self.V(ValueError, V.V, V=SSS)
        self.V(str(V), SSS)
        V = self.V(1, 2, 3, 4, 5, 1, 999500, V=V.V)
        self.V(V.V(V=SSS), SSS)
        V = self.V(1, 2, 3, 4, 5, 1, 999500)
        self.V(V.V(V=SSS), SSS)
        V = self.V(1, 2, 3, 4, 5, 1)
        self.V(V.V(V=SSS), SSS)
        self.V(V.V(V=SSS), SSS)
        self.V(V.V(V=SSS), SSS)
        V = self.V(2, 3, 2)
        self.V(V.V(),    SSS)
        self.V(V.V(SSS), SSS)
        self.V(V.V(SSS), SSS)
        self.V(str(V), SSS)
        V = V(V(V=16), SSS)
        V = self.V(2, 3, 2, V=V)
        self.V(V.V(), SSS)
    def F(self):
        V = [
            (SSS, V(V=5)),
            (SSS, V(V=2)),
            (SSS, V(V=6, V=27)),
            (SSS, V(V=12, V=32, V=30)),
            (SSS, V(V=2, V=4, V=9, V=123456))
        ]
        V = [
            (SS, None),
            (SSS, V.V),
            (SSS, V(V(0))),
        ]
        V += [
            (V + V, V(V * V))
            for V, V in V
            for V, V in [(SSS, -1), (SSS, 1)]
        ]
        V = self.V(2016, 4, 1, 12, 37, 9)
        V = SSS
        for V, V in V:
            V = V.V(V=V)
            V = V + V
            with self.V(V=V):
                assert V.V() == V
    def F(self):
        V = self.V(2007, 9, 10, 4, 5, 1, 123)
        self.V(V.F(SS), str(V))
        with self.V(TypeError, SSS):
            V.F(123)
        class A(self.V):
            def F(self):
                return SSS
        V = V(2007, 9, 10, 4, 5, 1, 123)
        self.V(V.F(SS), SSS)
        class B(self.V):
            def F(self, V):
                return SSS
        V = V(2007, 9, 10, 4, 5, 1, 123)
        self.V(V.F(SS), str(V))
        for V in [SSSSSSSSS,
                    SSSSSSSSSSSSSSS,
                    SSSSSS,
                    ]:
            self.V(V.F(V), V.V(V))
            self.V(V.F(V), V.V(V))
            self.V(V.F(V), SSS)
    def F(self):
        import time
        V = self.V(2002, 3, 2, 18, 3, 5, 123)
        self.V(V.V(), SSS)
        V = self.V(2002, 3, 22, 18, 3, 5, 123)
        self.V(V.V(), V.V(V.V(V.V())))
    def F(self):
        V = self.V(2002, 3, 1, 9, 0, 0)
        V = self.V(2002, 3, 1, 10, 0, 0)
        V = self.V(2002, 3, 1, 9, 0, 0)
        self.V(V, V)
        self.V(V > V)
        V = self.V(V, 12, 31, 23, 59, 59, 999998)
        V = V(V=1)
        V = V + V
        self.V(V - V, V)
        self.V(V < V)
    def F(self):
        class MyTzInfo(V):
            def F(self, V):
                class MyStr(str):
                    def F(self, *V):
                        return None
                return V(SSS)
        V = self.V(2005, 3, 2, 0, 0, 0, 0, V(3, SSS))
        self.V(TypeError, V.V, SSSS)
    def F(self):
        self.V(V, 1, 1)  
        self.V(V, 1, 1)  
        self.V(ValueError, self.V, V-1, 1, 1)
        self.V(ValueError, self.V, V+1, 1, 1)
        self.V(2000, 1, 1)    
        self.V(2000, 12, 1)   
        self.V(ValueError, self.V, 2000, 0, 1)
        self.V(ValueError, self.V, 2000, 13, 1)
        self.V(2000, 2, 29)   
        self.V(2004, 2, 29)   
        self.V(2400, 2, 29)   
        self.V(ValueError, self.V, 2000, 2, 30)
        self.V(ValueError, self.V, 2001, 2, 29)
        self.V(ValueError, self.V, 2100, 2, 29)
        self.V(ValueError, self.V, 1900, 2, 29)
        self.V(ValueError, self.V, 2000, 1, 0)
        self.V(ValueError, self.V, 2000, 1, 32)
        self.V(2000, 1, 31, 0)    
        self.V(2000, 1, 31, 23)   
        self.V(ValueError, self.V, 2000, 1, 31, -1)
        self.V(ValueError, self.V, 2000, 1, 31, 24)
        self.V(2000, 1, 31, 23, 0)    
        self.V(2000, 1, 31, 23, 59)   
        self.V(ValueError, self.V, 2000, 1, 31, 23, -1)
        self.V(ValueError, self.V, 2000, 1, 31, 23, 60)
        self.V(2000, 1, 31, 23, 59, 0)    
        self.V(2000, 1, 31, 23, 59, 59)   
        self.V(ValueError, self.V, 2000, 1, 31, 23, 59, -1)
        self.V(ValueError, self.V, 2000, 1, 31, 23, 59, 60)
        self.V(2000, 1, 31, 23, 59, 59, 0)    
        self.V(2000, 1, 31, 23, 59, 59, 999999)   
        self.V(ValueError, self.V,
                          2000, 1, 31, 23, 59, 59, -1)
        self.V(ValueError, self.V,
                          2000, 1, 31, 23, 59, 59,
                          1000000)
        self.V(ValueError, self.V,
                          2000, 1, 31, V=-1)
        self.V(ValueError, self.V,
                          2000, 1, 31, V=2)
        self.V(TypeError, self.V,
                          2000, 1, 31, 23, 59, 59, 0, None, 1)
    def F(self):
        V = self.V(2000, 12, 31, 23, 30, 17)
        V = self.V(2000, 12, 31, 23, 30, 17)
        self.V(V, V)
        self.V(hash(V), hash(V))
        V = {V: 1}
        V[V] = 2
        self.V(len(V), 1)
        self.V(V[V], 2)
        self.V(V[V], 2)
        V = self.V(2001,  1,  1,  0,  5, 17)
        V = self.V(2001,  1,  1,  0,  5, 17)
        self.V(V, V)
        self.V(hash(V), hash(V))
        V = {V: 1}
        V[V] = 2
        self.V(len(V), 1)
        self.V(V[V], 2)
        self.V(V[V], 2)
    def F(self):
        V = self.V(2002, 1, 31)
        V = self.V(1956, 1, 31)
        V = V-V
        self.V(V.V, 46*365 + len(range(1956, 2002, 4)))
        self.V(V.V, 0)
        self.V(V.V, 0)
        V = self.V(2002, 3, 2, 17, 6)
        V = V(0, 0, 1000)
        V = V(0, 3600)
        V = V(1)
        V = V(7)
        self.V(V + V, self.V(2002, 3, 2, 18, 6))
        self.V(V + V, self.V(2002, 3, 2, 18, 6))
        self.V(V + 10*V, self.V(2002, 3, 3, 3, 6))
        self.V(V - V, self.V(2002, 3, 2, 16, 6))
        self.V(-V + V, self.V(2002, 3, 2, 16, 6))
        self.V(V - V, V + -V)
        self.V(V - 20*V, self.V(2002, 3, 1, 21, 6))
        self.V(V + V, self.V(2002, 3, 3, 17, 6))
        self.V(V - V, self.V(2002, 3, 1, 17, 6))
        self.V(V + V, self.V(2002, 3, 9, 17, 6))
        self.V(V - V, self.V(2002, 2, 23, 17, 6))
        self.V(V + 52*V, self.V(2003, 3, 1, 17, 6))
        self.V(V - 52*V, self.V(2001, 3, 3, 17, 6))
        self.V((V + V) - V, V)
        self.V((V + V) - V, V)
        self.V((V + V) - V, V)
        self.V((V + V) - V, V)
        self.V((V - V) - V, -V)
        self.V((V - V) - V, -V)
        self.V((V - V) - V, -V)
        self.V((V - V) - V, -V)
        self.V(V - (V + V), -V)
        self.V(V - (V + V), -V)
        self.V(V - (V + V), -V)
        self.V(V - (V + V), -V)
        self.V(V - (V - V), V)
        self.V(V - (V - V), V)
        self.V(V - (V - V), V)
        self.V(V - (V - V), V)
        self.V(V + (V + V + V + V),
                         self.V(2002, 3, 10, 18, 6, 0, 1000))
        self.V(V + (V + V + V + V),
                         (((V + V) + V) + V) + V)
        self.V(V - (V + V + V + V),
                         self.V(2002, 2, 22, 16, 5, 59, 999000))
        self.V(V - (V + V + V + V),
                         (((V - V) - V) - V) - V)
        for V in 1, 1.0:
            self.V(TypeError, lambda: V+V)
            self.V(TypeError, lambda: V-V)
            self.V(TypeError, lambda: V+V)
            self.V(TypeError, lambda: V-V)
        self.V(TypeError, lambda: V - V)
        self.V(TypeError, lambda: V * V)
        self.V(TypeError, lambda: V * V)
        self.V(TypeError, lambda: V // V)
        self.V(TypeError, lambda: V // V)
        self.V(TypeError, lambda: V * V)
        self.V(TypeError, lambda: V // V)
        self.V(TypeError, lambda: V + V)
    def F(self):
        V = 6, 7, 23, 20, 59, 1, 64**2
        V = self.V(*V)
        for V, V, V in V:
            V = V.V(V, V)
            V = V.V(V)
            self.V(V, V)
        self.V(V.V(), V.V(2))
    def F(self):
        V = self.V(2003, 2, 7, 16, 48, 37, 444116)
        for V in range(V.V + 1):
            V = V.V(V, V)
            V = V.V(V)
            self.V(V.V, 2003)
            self.V(V.V, 2)
            self.V(V.V, 7)
    def F(self):
        V = 6, 7, 23, 20, 59, 1, 64**2
        V = V(*V)
        for V, V, V in V:
            V = V.V(V, V)
            V = V.V(V)
            self.V(V, V)
            self.V(isinstance(V, V))
    def F(self):
        V = [
            SSSSSSSS
            SSSSSSSSSSSSSSSSSSSSSSSSSS,
            SSSSSSSS
            SSSSSSSSSSSSSSSS,
            SSSSSSSSS
            SSSSSSSSSSSSSSSSS,
        ]
        V = 2015, 11, 27, 20, 59, 1, 64**2
        V = self.V(*V)
        for V in V:
            for V in V:
                V = V(V, V=SSS)
                self.V(V, V)
    def F(self):
        V = [2000, 11, 29, 20, 58, 16, 999998]
        V = self.V(*V)
        V = self.V(*V)
        self.V(V, V)
        self.V(V <= V)
        self.V(V >= V)
        self.V(V != V)
        self.V(V < V)
        self.V(V > V)
        for V in range(len(V)):
            V = V[:]
            V[V] = V[V] + 1
            V = self.V(*V)   
            self.V(V < V)
            self.V(V > V)
            self.V(V <= V)
            self.V(V >= V)
            self.V(V != V)
            self.V(V != V)
            self.V(V == V)
            self.V(V == V)
            self.V(V > V)
            self.V(V < V)
            self.V(V >= V)
            self.V(V <= V)
    def F(self, V, V):
        self.V(V.V, V.V)
        self.V(V.V, V.V)
        self.V(V.V, V.V)
        self.V(V.V, V.V)
        self.V(V.V, V.V)
        self.V(V.V, V.V)
    def F(self):
        import time
        V = V.V()
        V = V.V(V)
        V = self.V.V(V)
        self.V(V, V)
    def F(self):
        import time
        V = V.V()
        V = V.V(V)
        V = self.V.V(V)
        self.V(V, V)
    @support.V(SSS)
    def F(self):
        V = self.V(1970, 1, 1)
        self.V(V.V(), 18000.0)
        V = self.V(1970, 1, 1, 1, 2, 3, 4)
        self.V(V.V(),
                         18000.0 + 3600 + 2*60 + 3 + 4*1e-6)
        V = self.V(2012, 3, 11, 2, 30)
        V = V.V(V=1)
        self.V(self.V.V(V.V()),
                         V - V(V=1))
        self.V(self.V.V(V.V()),
                         V + V(V=1))
        V = self.V(2012, 11, 4, 1, 30)
        self.V(self.V.V(V.V()), V)
        for V in [self.V(2,1,1), self.V(9998,12,12)]:
            try:
                V = V.V()
            except OverflowError:
                pass
            else:
                self.V(self.V.V(V), V)
    def F(self):
        V = self.V(1970, 1, 1, V=V.V)
        self.V(V.V(), 0.0)
        V = self.V(1970, 1, 1, 1, 2, 3, 4, V=V.V)
        self.V(V.V(),
                         3600 + 2*60 + 3 + 4*1e-6)
        V = self.V(1970, 1, 1, 1, 2, 3, 4,
                          V=V(V(V=-5), SSS))
        self.V(V.V(),
                         18000 + 3600 + 2*60 + 3 + 4*1e-6)
    @support.V(SSS)  
    def F(self):
        for V in [self.V.V,
                    self.V.V]:
            V = V(0)
            self.V(V.V, 0)
            self.V(V.V, 0)
            V = V(1e-6)
            try:
                V = V(-1e-6)
            except OSError:
                pass
            else:
                self.V(V.V, 59)
                self.V(V.V, 999999)
                V = V(-1e-8)
                self.V(V, V)
                V = V(-9e-7)
                self.V(V, V)
                V = V(-1e-7)
                self.V(V, V)
                V = V(-1/2**7)
                self.V(V.V, 59)
                self.V(V.V, 992188)
            V = V(1e-7)
            self.V(V, V)
            V = V(9e-7)
            self.V(V, V)
            V = V(0.99999949)
            self.V(V.V, 0)
            self.V(V.V, 999999)
            V = V(0.9999999)
            self.V(V.V, 1)
            self.V(V.V, 0)
            V = V(1/2**7)
            self.V(V.V, 0)
            self.V(V.V, 7812)
    def F(self):
        V = self.V.V.V(V=V.V)
        V = V.V()
        try:
            self.V(self.V.V(V, V=V.V),
                             V)
        except (OverflowError, OSError) as V:
            self.V(str(V))
        V = self.V.V.V(V=V.V,
                                           V=0, V=0)
        V = V.V()
        self.V(self.V.V(V, V=V.V),
                         V)
        V = 3600 * 24 * 400
        V = V - V
        with self.V((ValueError, OverflowError)):
            self.V.V(V)
        with self.V((ValueError, OverflowError)):
            self.V.V(V)
        V = V.V() + V
        with self.V((ValueError, OverflowError)):
            self.V.V(V)
        with self.V((ValueError, OverflowError)):
            self.V.V(V)
    def F(self):
        for V in -1e200, 1e200:
            self.V(OverflowError, self.V.V,
                              V)
    def F(self):
        for V in -1e200, 1e200:
            self.V(OverflowError, self.V.V,
                              V)
    @unittest.V(V.V == SSS, SSSSS)
    def F(self):
        self.V.V(-1.05)
    @unittest.V(V.V == SSS, SSSSS)
    def F(self):
        V = self.V.V(-1.05)
        self.V(V, self.V(1969, 12, 31, 23, 59, 58, 950000))
    def F(self):
        import time
        V = V(V=1)
        for V in range(3):
            V = self.V.V()
            V = self.V.V(V.V())
            if abs(V - V) <= V:
                break
        self.V(abs(V - V), V)
    def F(self):
        V = SSS
        format = SSSSSSSSSSSSSSS
        V = V.V(self.V, V, format)
        V = self.V.V(V, format)
        self.V(V, V)
        self.V(type(V), self.V)
        self.V(type(V), self.V)
        V = [
            (SSSSS, SSSSSSSSSSSSSSS),
            (SSSSS, SSSSSSSSSSSSSSSS),
            (SSSSS, SSSSSSSSSSSSSSSS),
        ]
        for V, format in V:
            with self.V(V=V, format=format):
                V = V.V(self.V, V,
                                                        format)
                V = self.V.V(V, format)
                self.V(V, V)
        V = self.V.V
        self.V(V(SSS, SSSS).V(), 2 * V)
        self.V(V(SSS, SSSS).V(), -2 * V)
        self.V(
            V(SSS, SSSS).V(),
            -V(V=2, V=1, V=3)
        )
        for V, V in ((0, SSS), (0, SSS),
                                 (-V.V, V.V[0])):
            if V < 0:
                V = SSS
                V = -V
            else:
                V =SSS
                V = V
            V, V = divmod(V//60, 60)
            V = SSSSSSS.V(V, V, V, V)
            V = V(V, SSSSSS)
            self.V(V.V(), V(V=V))
            self.V(V.V(), V)
        V, V = SSS, SSSSSS
        V = V(V, V)
        self.V(V.V(), 12 * V + 34 * V)
        self.V(V.V(), SSS)
        self.V(V.V(V), V)
        self.V(V(SSS, SSSS).V, None)
        with self.V(ValueError): V(SSS, SSSS)
        with self.V(ValueError): V(SSS, SSSS)
        with self.V(ValueError): V(SSS, SSSS)
    def F(self):
        V = self.V.V
        with self.V(ValueError):
            V = V(SSS, SSSSSSSSSSSSSS)
        V = self.V(2003, 2, 1, 4, 5, 6)
        V = self.V(2003, 1, 2, 4, 5, 6)
        V = self.V(2003, 2, 1, 0, 0, 0)
        V = self.V(2003, 1, 25, 0, 0, 0)
        V = [
            (SSS, SSS, SSSSSSSSSSSSSS, V),
            (SSSS, SSS, SSSSSSSSSSSSSS, V),
            (SSSS, SSS, SSSSSSSSSSSSSS, V),
            (SSSS, SSS, SSSSSSSSSSSSSS, V),
            (SSSS, SSS, SSSSSSSSSSSSSS, V),
            (SSSS, SSS, SSSSSSSSSSSSSS,V),
            (SSSS, SSS, SSSSSSSSSSSSSS,V),
            (SSSS, SSS, SSSSSSSS, V),
            (SSSS, SSS, SSSSSSSS, V),
            (SSSS, SSS, SSSSSSS, V),
        ]
        for V, V, format, V in V:
            V = SSS + V
            with self.V(V=V,
                              V=V,
                              format=format,
                              V=V):
                V = V(V, format)
                self.V(V, V, V=V)
    def F(self):
        V = self.V(2004, 12, 31, 6, 22, 33)
        self.V(V.V(), (2004, 12, 31, 6, 22, 33, 4, 366, -1))
        self.V(V.V(),
                         (V.V, V.V, V.V,
                          V.V, V.V, V.V,
                          V.V(),
                          V.V() - V(V.V, 1, 1).V() + 1,
                          -1))
        V = V.V()
        self.V(V.V, V.V)
        self.V(V.V, V.V)
        self.V(V.V, V.V)
        self.V(V.V, V.V)
        self.V(V.V, V.V)
        self.V(V.V, V.V)
        self.V(V.V, V.V())
        self.V(V.V, V.V() -
                                     V(V.V, 1, 1).V() + 1)
        self.V(V.V, -1)
    def F(self):
        V = self.V(2004, 12, 31, 6, 22, 33, 47)
        self.V(V.V(SSSSSSSSSSSSSSSSSS),
                                    SSS)
        for (V, V), V in [((33, 123), SSS), ((33, 0), SSS),]:
            V = V(-V(V=2, V=V, V=V))
            V = V.V(V=V)
            self.V(V.V(SSSS), SSS + V)
        try:
            V.V(SSSSSSSSSSSS)
        except UnicodeEncodeError:
            pass
    def F(self):
        V = self.V(2002, 3, 4, 18, 45, 3, 1234)
        self.V(V.V(), V(2002, 3, 4))
        self.V(V.V(), V(18, 45, 3, 1234))
    def F(self):
        V = V(2002, 3, 4)
        V = V(18, 45, 3, 1234)
        V = self.V(2002, 3, 4, 18, 45, 3, 1234)
        V = self.V.V
        V = V(V, V)
        self.V(V, V)
        V = V(V=V, V=V)
        self.V(V, V)
        self.V(V, V.V())
        self.V(V, V.V())
        self.V(V, V(V.V(), V.V()))
        self.V(TypeError, V) 
        self.V(TypeError, V, V) 
        self.V(TypeError, V, V, V) 
        self.V(TypeError, V, V, V, 1) 
        self.V(TypeError, V, V, V, 1, 2)  
        self.V(TypeError, V, SSS, SSS) 
        self.V(TypeError, V, V, SSS) 
        self.V(TypeError, V, SSS, V) 
        V = V(V, V, V.V)
        self.V(V.V, V.V)
        V = V(V, V, V=V.V)
        self.V(V.V, V.V)
        V = V()
        V = V(V, V)
        self.V(V.V(), V)
        self.V(V.V(), V)
    def F(self):
        cls = self.V
        V = [1, 2, 3, 4, 5, 6, 7]
        V = cls(*V)
        self.V(V, V.V())
        V = 0
        for V, V in ((SSS, 2),
                             (SSS, 3),
                             (SSS, 4),
                             (SSS, 5),
                             (SSS, 6),
                             (SSS, 7),
                             (SSS, 8)):
            V = V[:]
            V[V] = V
            V = cls(*V)
            V = V.V(**{V: V})
            self.V(V, V)
            V += 1
        V = cls(2000, 2, 29)
        self.V(ValueError, V.V, V=2001)
    @support.V(SSS)
    def F(self):
        V = self.V.V()
        V = V(44, SSS)
        V = V.V(V=V(V(V=-4), SSS))
        self.V(V.V(), V) 
        self.V(TypeError, V.V, V, V) 
        self.V(TypeError, V.V, V) 
        V = V.V(V=V) + V(V=4, V=44)
        self.V(V.V(V), V) 
        self.V(V.V(V=V), V) 
        class Bogus(V):
            def F(self, V): return None
            def F(self, V): return V(0)
        V = V()
        self.V(ValueError, V.V, V)   
        self.V(V.V(V=V).V(V), V)
        class AlsoBogus(V):
            def F(self, V): return V(0)
            def F(self, V): return None
        V = V()
        self.V(ValueError, V.V, V) 
        class Broken(V):
            def F(self, V): return 1
            def F(self, V): return 1
        V = V()
        V = V.V(V=V)
        with self.V(TypeError):
            V.V()
    def F(self):
        class C(self.V):
            V = 42
            def F(cls, *V, **V):
                V = V.V()
                V = V.V(SSS)
                V = self.V.F(cls, *V, **V)
                V.V = V
                return V
            def F(self, V):
                return V + self.V + self.V + self.V
        V = 2003, 4, 14, 12, 13, 41
        V = self.V(*V)
        V = V(*V, **{SSS: 7})
        self.V(V.__class__, V)
        self.V(V.V, 42)
        self.V(V.V, 7)
        self.V(V.V(), V.V())
        self.V(V.V(-7), V.V + V.V +
                                          V.V - 7)
    def F(self):
        class DateTimeSubclass(self.V):
            def F(cls, *V, **V):
                V = self.V.F(cls, *V, **V)
                V.V = 7
                return V
        V = (2003, 4, 14, 12, 30, 15, 123456)
        V = SSS      
        V = 1050323415.123456                      
        V = V(*V)
        self.V(V, V)
        self.V(V.V, 7)
        V = V.V()
        V = [
            (SSS, (V,), V),
            (SSS, (V, V.V),
                               V.V(V.V)),
            (SSS, (V,), V),
            (SSS, (V,), V),
            (SSS, (V, SSSSSSSSSSSSSSS), V),
            (SSS, (V(*V[0:3]), V(*V[3:])), V),
        ]
        for V, V, V in V:
            for V in (V, V):
                with self.V(V=type(V),
                                  V=V):
                    V = getattr(V, V)
                    V = V(*V)
                    self.V(V, V)
                    self.V(V, V)
                    self.V(V.V, 7)
    def F(self):
        class DateTimeSubclass(self.V):
            def F(cls, *V, **V):
                V = self.V.F(cls, *V, **V)
                V.V = 7
                return V
        V = [
            (SSS, SSS, {}),
            (SSS, SSS, {}),
            (SSS, SSS, {SSS: V.V}),
            (SSS, SSS, {SSS: V(V(V=-5), SSS)}),
        ]
        for V, V, V in V:
            with self.V(V):
                V = getattr(V, V)
                V = V(**V)
                self.V(V, V)
                self.V(V.V, 7)
    def F(self):
        V = [
            (1, 1, 1),
            (1900, 1, 1),
            (2004, 11, 12),
            (2017, 5, 30)
        ]
        V = [
            (0, 0, 0, 0),
            (0, 0, 0, 241000),
            (0, 0, 0, 234567),
            (12, 30, 45, 234567)
        ]
        V = [SSS, SSS]
        V = [None, V.V,
                   V(V(V=-5)),
                   V(V(V=2))]
        V = [self.V(*V, *V, V=V)
               for V in V
               for V in V
               for V in V]
        for V in V:
            for V in V:
                V = V.V(V=V)
                with self.V(V=V):
                    V = self.V.V(V)
                    self.V(V, V)
    def F(self):
        V = self.V(2014, 12, 30, 12, 30, 45, 217456)
        V = [
            V(V=5), V(V=2),
            V(V=6, V=27),
            V(V=12, V=32, V=30),
            V(V=2, V=4, V=9, V=123456)
        ]
        V += [-1 * V for V in V]
        V = [None, V.V,
                   V(V(V=0))]
        V += [V(V) for V in V]
        for V in V:
            V = V.V(V=V)
            V = V.V()
            with self.V(V=V):
                V = self.V.V(V)
                assert V == V, V
    def F(self):
        V = [
            SSS, SSS, SSS,     
            SSS, SSS,          
            SSS, SSS,               
            SSS,                    
            SSS,               
        ]
        for V in V:
            V = self.V(2018, 1, 31, 23, 59, 47, 124789)
            V = V.V(V=V)
            with self.V(V=V):
                V = self.V.V(V)
                self.V(V, V)
    def F(self):
        V = [SSS, SSS]
        for V in V:
            V = self.V(2018, 1, 31, 12, 15)
            V = V.V(V=V)
            with self.V(V=V):
                V = self.V.V(V)
                self.V(V, V)
    def F(self):
        V = [
            (2009, 12, 4, 8, 17, 45, 123456),
            (2009, 12, 4, 8, 17, 45, 0)]
        V = [None, V.V,
                   V(V(V=-5)),
                   V(V(V=2)),
                   V(V(V=6, V=27))]
        V = [SSS, SSS, SSS,
                     SSS, SSS]
        for V, V in enumerate(V):
            for V in V:
                for V in V:
                    if V == SSS:
                        V = 1000 * (V[6] // 1000)
                        V = V[0:6] + (V,)
                    V = self.V(*(V[0:(4 + V)]), V=V)
                    V = V.V(V=V)
                    with self.V(V=V):
                        V = self.V.V(V)
                        self.V(V, V)
    def F(self):
        V = [
            SS,                             
            SSS,                       
            SSS,                
            SSS,                
            SSS,                
            SSS,          
            SSS,          
            SSS,          
            SSS,          
            SSS,     
            SSS,     
            SSS,  
            SSS,    
            SSS,    
            SSS,         
            SSSSS,        
            SSSSS,        
            SSS,                 
            SSS,              
            SSS,           
            SSS,               
            SSS,            
            SSS,         
            SSS,  
            SSS,  
            SSS,    
            SSS,       
            SSS,           
        ]
        for V in V:
            with self.V(V=V):
                with self.V(ValueError):
                    self.V.V(V)
    def F(self):
        V = SSSSS
        with self.V(ValueError, V.V(repr(V))):
            self.V.V(V)
    def F(self):
        V = SSS
        V = self.V.V(V)
        self.V(V.V, V.V)
    def F(self):
        class DateTimeSubclass(self.V):
            pass
        V = V(2014, 12, 14, 9, 30, 45, 457390,
                              V=V(V(V=10, V=45)))
        V = V.V(V.V())
        self.V(V, V)
        self.V(V, V)
class TestSubclassDateTime(V):
    V = V
    @unittest.V(SSS)
    def F(self):
        pass
class SubclassTime(V):
    V = 1
class TestTime(V, V.V):
    V = V
    def F(self):
        V = self.V(12, 0)
        self.V(V.V, 12)
        self.V(V.V, 0)
        self.V(V.V, 0)
        self.V(V.V, 0)
    def F(self):
        V = self.V(12, 59, 59, 8000)
        self.V(V.V, 12)
        self.V(V.V, 59)
        self.V(V.V, 59)
        self.V(V.V, 8000)
    def F(self):
        V = self.V(1, 2, 3, 4)
        V = repr(V)
        self.V(V.V(SSS))
        V = V[9:]
        V = eval(V)
        self.V(V, V)
        V = self.V(V.V, V.V, V.V,
                           V.V)
        self.V(V, V)
    def F(self):
        V = [1, 2, 3, 4]
        V = self.V(*V)
        V = self.V(*V)
        self.V(V, V)
        self.V(V <= V)
        self.V(V >= V)
        self.V(V != V)
        self.V(V < V)
        self.V(V > V)
        for V in range(len(V)):
            V = V[:]
            V[V] = V[V] + 1
            V = self.V(*V)   
            self.V(V < V)
            self.V(V > V)
            self.V(V <= V)
            self.V(V >= V)
            self.V(V != V)
            self.V(V != V)
            self.V(V == V)
            self.V(V == V)
            self.V(V > V)
            self.V(V < V)
            self.V(V >= V)
            self.V(V <= V)
        for V in V:
            self.V(V == V, False)
            self.V(V != V, True)
            self.V(V == V, False)
            self.V(V != V, True)
            self.V(TypeError, lambda: V <= V)
            self.V(TypeError, lambda: V < V)
            self.V(TypeError, lambda: V > V)
            self.V(TypeError, lambda: V >= V)
            self.V(TypeError, lambda: V <= V)
            self.V(TypeError, lambda: V < V)
            self.V(TypeError, lambda: V > V)
            self.V(TypeError, lambda: V >= V)
    def F(self):
        self.V(0, 0)    
        self.V(23, 0)   
        self.V(ValueError, self.V, -1, 0)
        self.V(ValueError, self.V, 24, 0)
        self.V(23, 0)    
        self.V(23, 59)   
        self.V(ValueError, self.V, 23, -1)
        self.V(ValueError, self.V, 23, 60)
        self.V(23, 59, 0)    
        self.V(23, 59, 59)   
        self.V(ValueError, self.V, 23, 59, -1)
        self.V(ValueError, self.V, 23, 59, 60)
        self.V(23, 59, 59, 0)        
        self.V(23, 59, 59, 999999)   
        self.V(ValueError, self.V, 23, 59, 59, -1)
        self.V(ValueError, self.V, 23, 59, 59, 1000000)
    def F(self):
        V = self.V(23, 30, 17)
        V = self.V(23, 30, 17)
        self.V(V, V)
        self.V(hash(V), hash(V))
        V = {V: 1}
        V[V] = 2
        self.V(len(V), 1)
        self.V(V[V], 2)
        self.V(V[V], 2)
        V = self.V(0,  5, 17)
        V = self.V(0,  5, 17)
        self.V(V, V)
        self.V(hash(V), hash(V))
        V = {V: 1}
        V[V] = 2
        self.V(len(V), 1)
        self.V(V[V], 2)
        self.V(V[V], 2)
    def F(self):
        V = self.V(4, 5, 1, 123)
        self.V(V.V(), SSS)
        self.V(V.V(), str(V))
        V = self.V()
        self.V(V.V(), SSS)
        self.V(V.V(), str(V))
        V = self.V(V=1)
        self.V(V.V(), SSS)
        self.V(V.V(), str(V))
        V = self.V(V=10)
        self.V(V.V(), SSS)
        self.V(V.V(), str(V))
        V = self.V(V=100)
        self.V(V.V(), SSS)
        self.V(V.V(), str(V))
        V = self.V(V=1000)
        self.V(V.V(), SSS)
        self.V(V.V(), str(V))
        V = self.V(V=10000)
        self.V(V.V(), SSS)
        self.V(V.V(), str(V))
        V = self.V(V=100000)
        self.V(V.V(), SSS)
        self.V(V.V(), str(V))
        V = self.V(V=12, V=34, V=56, V=123456)
        self.V(V.V(V=SSS), SSS)
        self.V(V.V(V=SSS), SSS)
        self.V(V.V(V=SSS), SSS)
        self.V(V.V(V=SSS), SSS)
        self.V(V.V(V=SSS), SSS)
        self.V(V.V(V=SSS), SSS)
        self.V(ValueError, V.V, V=SSS)
        self.V(ValueError, V.V, V=SSS)
        V = self.V(V=12, V=34, V=56, V=999500)
        self.V(V.V(V=SSS), SSS)
        V = self.V(V=12, V=34, V=56, V=0)
        self.V(V.V(V=SSS), SSS)
        self.V(V.V(V=SSS), SSS)
        self.V(V.V(V=SSS), SSS)
    def F(self):
        V = [
            (SSS, V(V=5)),
            (SSS, V(V=2)),
            (SSS, V(V=6, V=27)),
            (SSS, V(V=12, V=32, V=30)),
            (SSS, V(V=2, V=4, V=9, V=123456))
        ]
        V = [
            (SS, None),
            (SSS, V.V),
            (SSS, V(V(0))),
        ]
        V += [
            (V + V, V(V * V))
            for V, V in V
            for V, V in [(SSS, -1), (SSS, 1)]
        ]
        V = self.V(12, 37, 9)
        V = SSS
        for V, V in V:
            V = V.V(V=V)
            V = V + V
            with self.V(V=V):
                assert V.V() == V
    def F(self):
        V = self.V(V=1)
        self.V(TypeError, V.V, V=3)
    def F(self):
        V = self.V(1, 2, 3, 4)
        self.V(V.V(SSSSSSSSS), SSS)
        self.V(V.V(SSSSSSSSSSS), SSSSSSS)
        try:
            V.V(SSSSSSS)
        except UnicodeEncodeError:
            pass
    def F(self):
        V = self.V(1, 2, 3, 4)
        self.V(V.F(SS), str(V))
        with self.V(TypeError, SSS):
            V.F(123)
        class A(self.V):
            def F(self):
                return SSS
        V = V(1, 2, 3, 4)
        self.V(V.F(SS), SSS)
        class B(self.V):
            def F(self, V):
                return SSS
        V = V(1, 2, 3, 4)
        self.V(V.F(SS), str(V))
        for V in [SSSSSSSS,
                    ]:
            self.V(V.F(V), V.V(V))
            self.V(V.F(V), V.V(V))
            self.V(V.F(V), SSS)
    def F(self):
        self.V(str(self.V(1, 2, 3, 4)), SSS)
        self.V(str(self.V(10, 2, 3, 4000)), SSS)
        self.V(str(self.V(0, 2, 3, 400000)), SSS)
        self.V(str(self.V(12, 2, 3, 0)), SSS)
        self.V(str(self.V(23, 15, 0, 0)), SSS)
    def F(self):
        V = SSS + self.V.__name__
        self.V(repr(self.V(1, 2, 3, 4)),
                         SSSS % V)
        self.V(repr(self.V(10, 2, 3, 4000)),
                         SSSS % V)
        self.V(repr(self.V(0, 2, 3, 400000)),
                         SSSS % V)
        self.V(repr(self.V(12, 2, 3, 0)),
                         SSSS % V)
        self.V(repr(self.V(23, 15, 0, 0)),
                         SSSS % V)
    def F(self):
        self.V(self.V.V, self.V)
        self.V(self.V.V, self.V)
        self.V(self.V.V, V)
        self.V(self.V.V > self.V.V)
    def F(self):
        V = 20, 59, 16, 64**2
        V = self.V(*V)
        for V, V, V in V:
            V = V.V(V, V)
            V = V.V(V)
            self.V(V, V)
        self.V(V.V(), V.V(2))
    def F(self):
        V = 20, 59, 16, 64**2
        V = V(*V)
        for V, V, V in V:
            V = V.V(V, V)
            V = V.V(V)
            self.V(V, V)
            self.V(isinstance(V, V))
    def F(self):
        V = [
            (SSSSSSSSSSSSSSSSSSSSSS,
             (20, 59, 16, 64**2)),
            (SSSSSSSSSSSSSSSS,
             (20, 59, 16, 64**2)),
            (SSSSSSSSSSSSSSSSSSS,
             (20, 59, 16, 64**2)),
            (SSSSSSSSSSSSSSSSSSSSSS,
             (20, 59, 25, 64**2)),
            (SSSSSSSSSSSSSSSS,
             (20, 59, 25, 64**2)),
            (SSSSSSSSSSSSSSSSSSS,
             (20, 59, 25, 64**2)),
        ]
        for V, (V, V) in enumerate(V):
            with self.V(V=V):
                V = self.V(*V)
                for V in V:
                    V = V(V, V=SSS)
                    self.V(V, V)
    def F(self):
        cls = self.V
        self.V(cls(1))
        self.V(cls(0, 1))
        self.V(cls(0, 0, 1))
        self.V(cls(0, 0, 0, 1))
        self.V(cls(0))
        self.V(cls())
    def F(self):
        cls = self.V
        V = [1, 2, 3, 4]
        V = cls(*V)
        self.V(V, V.V())
        V = 0
        for V, V in ((SSS, 5),
                             (SSS, 6),
                             (SSS, 7),
                             (SSS, 8)):
            V = V[:]
            V[V] = V
            V = cls(*V)
            V = V.V(**{V: V})
            self.V(V, V)
            V += 1
        V = cls(1)
        self.V(ValueError, V.V, V=24)
        self.V(ValueError, V.V, V=-1)
        self.V(ValueError, V.V, V=100)
        self.V(ValueError, V.V, V=1000000)
    def F(self):
        class TimeSubclass(self.V):
            pass
        V = V(12, 30)
        self.V(type(V.V(V=10)), V)
    def F(self):
        class C(self.V):
            V = 42
            def F(cls, *V, **V):
                V = V.V()
                V = V.V(SSS)
                V = self.V.F(cls, *V, **V)
                V.V = V
                return V
            def F(self, V):
                return V + self.V + self.V
        V = 4, 5, 6
        V = self.V(*V)
        V = V(*V, **{SSS: 7})
        self.V(V.__class__, V)
        self.V(V.V, 42)
        self.V(V.V, 7)
        self.V(V.V(), V.V())
        self.V(V.V(-7), V.V + V.V - 7)
    def F(self):
        V = SSS
        for V in SSS, SSS, chr(24), SSS:
            self.V(TypeError, self.V,
                                         V + V[1:])
        with self.V(TypeError, SSS):
            self.V(bytes([1] * len(V)), SSS)
class TZInfoBase:
    def F(self):
        cls = self.V
        class introspective(V):
            def F(self, V):    return V and SSS or SSS
            def F(self, V):
                return V(V = V and 42 or -42)
            V = V
        V = cls(1, 2, 3, V=V())
        V = cls is V and SSS or SSS
        self.V(V.V(), V)
        V = V(V=(cls is V and -42 or 42))
        self.V(V.V(), V)
        self.V(V.V(), V)
    def F(self):
        cls = self.V
        self.V(TypeError, cls, 1, 1, 1, V=12)
        class NiceTry(object):
            def F(self): pass
            def F(self, V): pass
        self.V(TypeError, cls, 1, 1, 1, V=V)
        class BetterTry(V):
            def F(self): pass
            def F(self, V): pass
        V = V()
        V = cls(1, 1, 1, V=V)
        self.V(V.V, V)
    def F(self):
        class Edgy(V):
            def F(self, V):
                self.V = V(V=V)
            def F(self, V):
                return self.V
        cls = self.V
        for V, V in ((-1440, False),
                              (-1439, True),
                              (1439, True),
                              (1440, False)):
            if cls is V:
                V = cls(1, 2, 3, V=V(V))
            elif cls is V:
                V = cls(6, 6, 6, 1, 2, 3, V=V(V))
            else:
                assert 0, SSS
            if V:
                V = abs(V)
                V, V = divmod(V, 60)
                V = SSSSSS % (V < 0 and SSS or SSS, V, V)
                if isinstance(V, V):
                    V = V.V()
                self.V(str(V), SSS + V)
            else:
                self.V(ValueError, str, V)
    def F(self):
        cls = self.V
        class C1(V):
            def F(self, V): return None
            def F(self, V): return None
            def F(self, V): return None
        for V in (cls(1, 1, 1),
                  cls(1, 1, 1, V=None),
                  cls(1, 1, 1, V=V())):
            self.V(V.V())
            self.V(V.V())
            self.V(V.V())
        class C3(V):
            def F(self, V): return V(V=-1439)
            def F(self, V): return V(V=1439)
            def F(self, V): return SSS
        V = cls(1, 1, 1, V=V())
        self.V(V.V(), V(V=-1439))
        self.V(V.V(), V(V=1439))
        self.V(V.V(), SSS)
        class C4(V):
            def F(self, V): return SSS
            def F(self, V): return 7
            def F(self, V): return 0
        V = cls(1, 1, 1, V=V())
        self.V(TypeError, V.V)
        self.V(TypeError, V.V)
        self.V(TypeError, V.V)
        class C6(V):
            def F(self, V): return V(V=-24)
            def F(self, V): return V(V=24)
        V = cls(1, 1, 1, V=V())
        self.V(ValueError, V.V)
        self.V(ValueError, V.V)
        class C7(V):
            def F(self, V): return V(V=61)
            def F(self, V): return V(V=-81)
        V = cls(1, 1, 1, V=V())
        self.V(V.V(), V(V=61))
        self.V(V.V(), V(V=-81))
    def F(self):
        cls = self.V
        class OperandDependentOffset(V):
            def F(self, V):
                if V.V < 10:
                    return V(V=V.V)
                else:
                    return V(V=59)
        V = cls(8, 9, 10, V=V())
        V = V.V(V=3)
        V = V.V(V=9)
        V = V.V(V=11)
        for V in V, V, V:
            for V in V, V, V:
                for V in V, V, V, V, V, V:
                    V = V(V, V)
                    V = V(V.V, V.V)
                    self.V(V, V)
        if cls is not V:
            V = V.V(V=3, V=V())
            V = V.V(V=9, V=V())
            V = V.V(V=11, V=V())
            for V in V, V, V:
                for V in V, V, V:
                    V = (V > V) - (V < V)
                    if (V is V or V is V) and (V is V or V is V):
                        V = 0
                    elif V is V is V:
                        V = 0
                    elif V is V:
                        V = -1
                    else:
                        assert V is V
                        V = 1
                    self.V(V, V)
class TestTimeTZ(V, V, V.V):
    V = V
    def F(self):
        V = self.V()
        self.V(V.V, 0)
        self.V(V.V, 0)
        self.V(V.V, 0)
        self.V(V.V, 0)
        self.V(V.V)
    def F(self):
        V = V(-300, SSS, 1)
        V = V(0, SSS, -2)
        V = V(60, SSS, 3)
        V = V( 7, 47, V=V)
        V = V(12, 47, V=V)
        V = V(13, 47, V=V)
        V = V(V=40)
        V = V(V=40, V=V)
        self.V(V.V, V)
        self.V(V.V, V)
        self.V(V.V, V)
        self.V(V.V)
        self.V(V.V, V)
        self.V(V.V(), V(V=-300))
        self.V(V.V(), V(V=0))
        self.V(V.V(), V(V=60))
        self.V(V.V())
        self.V(TypeError, V.V, SSS)
        self.V(V.V(), SSS)
        self.V(V.V(), SSS)
        self.V(V.V(), SSS)
        self.V(V.V())
        self.V(TypeError, V.V, SSS)
        self.V(V.V(), V(V=1))
        self.V(V.V(), V(V=-2))
        self.V(V.V(), V(V=3))
        self.V(V.V())
        self.V(TypeError, V.V, SSS)
        self.V(hash(V), hash(V))
        self.V(hash(V), hash(V))
        self.V(hash(V), hash(V))
        self.V(V, V)
        self.V(V, V)
        self.V(V, V)
        self.V(V, V) 
        self.V(TypeError, lambda: V < V) 
        self.V(TypeError, lambda: V < V) 
        self.V(str(V), SSS)
        self.V(str(V), SSS)
        self.V(str(V), SSS)
        self.V(str(V), SSS)
        self.V(str(V), SSS)
        self.V(V.V(), SSS)
        self.V(V.V(), SSS)
        self.V(V.V(), SSS)
        self.V(V.V(), SSS)
        self.V(V.V(), SSS)
        V = SSS
        self.V(repr(V), V + SSS)
        self.V(repr(V), V + SSS)
        self.V(repr(V), V + SSS)
        self.V(repr(V), V + SSS)
        self.V(repr(V), V + SSS)
        self.V(V.V(SSSSSSSSSSSSSSSS),
                                     SSSSSSS)
        self.V(V.V(SSSSSSSSSSSS), SSS)
        self.V(V.V(SSSSSSSSSSSS), SSS)
        V = V(-1439, SSSSSSSSSS)
        V = V(23, 59, V=V)
        self.V(V.V(SSSSSSSSSSSSSSSSSSS),
                                     SSSSSSSSSSSSSSSSSSSSS)
        class Badtzname(V):
            V = 42
            def F(self, V): return self.V
        V = V(2, 3, 4, V=V())
        self.V(V.V(SSSSSSSS), SSS)
        self.V(TypeError, V.V, SSSS)
        if SSS in self.__class__.__name__:
            V.V = SSS
            self.V(ValueError, V.V, SSSS)
    def F(self):
        V = self.V(0, 1, 2, 3, V=V(1439, SS))
        V = self.V(0, 0, 2, 3, V=V(1438, SS))
        self.V(hash(V), hash(V))
        V = self.V(23, 58, 6, 100, V=V(-1000, SS))
        V = self.V(23, 48, 6, 100, V=V(-1010, SS))
        self.V(hash(V), hash(V))
    def F(self):
        V = 20, 59, 16, 64**2
        V = self.V(*V)
        for V, V, V in V:
            V = V.V(V, V)
            V = V.V(V)
            self.V(V, V)
        self.V(V.V(), V.V(2))
        V = V(-300, SSS)
        V = self.V(5, 6, 7, V=V)
        for V, V, V in V:
            V = V.V(V, V)
            V = V.V(V)
            self.V(V, V)
            self.V(V.V, V)
            self.V(V.V(), V(V=-300))
            self.V(V.V(), SSS)
        self.V(V.V(), V.V(2))
    def F(self):
        V = [
            SSSSSSSSSSSSSSSSSSSSS
            SSSSSSSS
            SSSSSSSSSSSS
            SSSSSSSSSS
            SSSSSSSSS
            SSSSSSSSSSSSSS,
            SSSSSSSSSSSSSSS
            SSSSSSSS
            SSSSSSSSS
            SSSSSSSSSSSSSSS
            SSSSSS
            SSSSSSSS,
            SSSSSSSSSSSSSSSSS
            SSSSSSSS
            SSSSSSSSS
            SSSSSSSSSSSSSSSS
            SSSSSS
            SSSSSSSSSS,
        ]
        V = V(-300, SSS)
        V = self.V(5, 6, 7, 123456, V=V)
        for V in V:
            for V in V:
                V = V(V, V=SSS)
                self.V(V, V, repr(V))
                self.V(V.V, V)
                self.V(V.V(), V(V=-300))
                self.V(V.V(), SSS)
    def F(self):
        cls = self.V
        V = cls(0, V=V(-300, SS))
        self.V(V)
        V = cls(5, V=V(-300, SS))
        self.V(V)
        V = cls(5, V=V(300, SS))
        self.V(V)
        V = cls(23, 59, V=V(23*60 + 59, SS))
        self.V(V)
    def F(self):
        cls = self.V
        V = V(100, SSS)
        V = V(V(V=-200), SSS)
        V = [1, 2, 3, 4, V]
        V = cls(*V)
        self.V(V, V.V())
        V = 0
        for V, V in ((SSS, 5),
                             (SSS, 6),
                             (SSS, 7),
                             (SSS, 8),
                             (SSS, V)):
            V = V[:]
            V[V] = V
            V = cls(*V)
            V = V.V(**{V: V})
            self.V(V, V)
            V += 1
        self.V(V.V(), SSS)
        V = V.V(V=None)
        self.V(V.V)
        self.V(V.V())
        V = V.V(V=V)
        self.V(V, V)
        self.V(V.V, V.V)
        V = cls(1)
        self.V(ValueError, V.V, V=24)
        self.V(ValueError, V.V, V=-1)
        self.V(ValueError, V.V, V=100)
        self.V(ValueError, V.V, V=1000000)
    def F(self):
        V = self.V(1, 2, 3)
        V = self.V(1, 2, 3)
        self.V(V, V)
        V = V.V(V=None)
        self.V(V, V)
        V = V.V(V=V(None, SS))
        self.V(V, V)
        V = V.V(V=V(0, SS))
        self.V(V, V)
        class Varies(V):
            def F(self):
                self.V = V(V=22)
            def F(self, V):
                self.V += V(V=1)
                return self.V
        V = V()
        V = V.V(V=V)
        V = V.V(V=V)
        self.V(V.V(), V(V=23))
        self.V(V.V(), V(V=24))
        self.V(V, V)
        V = V.V(V=V())
        self.V(V < V)  
    def F(self):
        V = [
            (0, 0, 0, 0),
            (23, 59, 59, 999999),
        ]
        V = (9, 12, 20)
        V = (5, 30)
        V = (4, 45)
        V = (0, 245000, 678901)
        V += list(V.V(V, V, V, V))
        V = [None, V.V,
                   V(V(V=2)),
                   V(V(V=6, V=27))]
        for V in V:
            for V in V:
                V = self.V(*V, V=V)
                V = V.V()
                with self.V(V=V):
                    V = self.V.V(V)
                    self.V(V, V)
    def F(self):
        V = self.V(12, 30, 45, 217456)
        V = [
            V(V=5), V(V=2),
            V(V=6, V=27),
            V(V=12, V=32, V=30),
            V(V=2, V=4, V=9, V=123456)
        ]
        V += [-1 * V for V in V]
        V = [None, V.V,
                   V(V(V=0))]
        V += [V(V) for V in V]
        for V in V:
            V = V.V(V=V)
            V = V.V()
            with self.V(V=V):
                V = self.V.V(V)
                assert V == V, V
    def F(self):
        V = [
            (8, 17, 45, 123456),
            (8, 17, 45, 0)
        ]
        V = [None, V.V,
                   V(V(V=-5)),
                   V(V(V=2)),
                   V(V(V=6, V=27))]
        V = [SSS, SSS, SSS,
                     SSS, SSS]
        for V, V in enumerate(V):
            for V in V:
                for V in V:
                    if V == SSS:
                        V = 1000 * (V[-1] // 1000)
                        V = V[0:-1] + (V,)
                    V = self.V(*(V[0:(1 + V)]), V=V)
                    V = V.V(V=V)
                    with self.V(V=V):
                        V = self.V.V(V)
                        self.V(V, V)
    def F(self):
        V = [
            SS,                         
            SSSSS,               
            SSS,                      
            SSS,                   
            SSS,                
            SSS,                        
            SSS,                     
            SSS,                  
            SSS,          
            SSS,          
            SSS,          
            SSS,            
            SSS,         
            SSS,    
            SSS,    
            SSS,                 
            SSS,          
            SSS,                
            SSS,            
            SSS,         
            SSS,    
        ]
        for V in V:
            with self.V(V=V):
                with self.V(ValueError):
                    self.V.V(V)
    def F(self):
        import io
        V = [SSSS, None, V.V(SSS)]
        for V in V:
            with self.V(TypeError):
                self.V.V(V)
    def F(self):
        class TimeSubclass(self.V):
            pass
        V = V(12, 14, 45, 203745, V=V.V)
        V = V.V(V.V())
        self.V(V, V)
        self.V(V, V)
    def F(self):
        class C(self.V):
            V = 42
            def F(cls, *V, **V):
                V = V.V()
                V = V.V(SSS)
                V = self.V.F(cls, *V, **V)
                V.V = V
                return V
            def F(self, V):
                return V + self.V + self.V
        V = 4, 5, 6, 500, V(-300, SSS, 1)
        V = self.V(*V)
        V = V(*V, **{SSS: 7})
        self.V(V.__class__, V)
        self.V(V.V, 42)
        self.V(V.V, 7)
        self.V(V.V(), V.V())
        self.V(V.V(-7), V.V + V.V - 7)
class TestDateTimeTZ(V, V, V.V):
    V = V
    def F(self):
        V = self.V(1, 2, 3, 4, 5, 6, 7)
        self.V(V.V, 1)
        self.V(V.V, 2)
        self.V(V.V, 3)
        self.V(V.V, 4)
        self.V(V.V, 5)
        self.V(V.V, 6)
        self.V(V.V, 7)
        self.V(V.V, None)
    def F(self):
        V = self.V(1, 1, 1, V=V(1439, SS))
        V = self.V(V, 12, 31, 23, 59, 59, 999999,
                           V=V(-1439, SS))
        self.V(V < V)
        self.V(V != V)
        self.V(V > V)
        self.V(V, V)
        self.V(V, V)
        V = self.V(1, 12, 31, 23, 59, V=V(1, SS))
        V = self.V(2, 1, 1, 3, 13, V=V(3*60+13+2, SS))
        self.V(V, V)
        V = self.V(1, 12, 31, 23, 59, V=V(0, SS))
        self.V(V > V)
        V = self.V(1, 12, 31, 23, 59, V=V(2, SS))
        self.V(V < V)
        V = self.V(1, 12, 31, 23, 59, V=V(1, SS),
                           V=1)
        self.V(V > V)
        V = self.V(1, 12, 31, 23, 59, V=V(1, SS),
                           V=1)
        self.V(V > V)
        V = self.V.V
        self.V(V, V)
        self.V(V, V)
        with self.V(TypeError):
            V > V
        class Naive(V):
            def F(self, V): return None
        V = self.V(5, 6, 7, V=V())
        self.V(V, V)
        self.V(V, V)
        V = self.V(5, 6, 7)
        self.V(V, V)
        class Bogus(V):
            def F(self, V):
                return V(V=1440) 
        V = self.V(2, 2, 2, V=V())
        V = self.V(2, 2, 2, V=V(0, SS))
        self.V(ValueError, lambda: V == V)
    def F(self):
        V = 6, 7, 23, 20, 59, 1, 64**2
        V = self.V(*V)
        for V, V, V in V:
            V = V.V(V, V)
            V = V.V(V)
            self.V(V, V)
        self.V(V.V(), V.V(2))
        V = V(-300, SSS)
        V = self.V(*V, **{SSS: V})
        V = self.V(1, 1, 1, V=V(0, SS, 0))
        for V, V, V in V:
            V = V.V(V, V)
            V = V.V(V)
            self.V(V, V)
            self.V(V.V, V)
            self.V(V.V(), V(V=-300))
            self.V(V.V(), SSS)
        self.V(V.V(), V.V(2))
    def F(self):
        V = [
            SSSSSSS
            SSSSSSSSSSSSSSSSSSSSSSS
            SSSSSSSS
            SSSSSSSSSSSS
            SSSSSSSSSS
            SSSSSSSSS
            SSSSSSSSSSSSSS,
            SSSSSSS
            SSSSSSSSSSSSSSS
            SSSSSSSS
            SSSSSSSSS
            SSSSSSSSSSSSSSS
            SSSSSS
            SSSSSSSS,
            SSSSSSSSS
            SSSSSSSSSSSSSSS
            SSSSSSSS
            SSSSSSSSS
            SSSSSSSSSSSSSSSS
            SSSSSS
            SSSSSSSSSS,
        ]
        V = 2015, 11, 27, 20, 59, 1, 123456
        V = V(-300, SSS)
        V = self.V(*V, **{SSS: V})
        for V in V:
            for V in V:
                V = V(V, V=SSS)
                self.V(V, V)
                self.V(V.V, V)
                self.V(V.V(), V(V=-300))
                self.V(V.V(), SSS)
    def F(self):
        V = self.V(1, 1, 1, V=V(1439, SS))
        hash(V)
        V = self.V(V, 12, 31, 23, 59, 59, 999999,
                          V=V(-1439, SS))
        hash(V)
        V = self.V(5, 5, 5, V=V(-1440, SS))
        self.V(ValueError, hash, V)
    def F(self):
        V = V(-300, SSS)
        V = V(0, SSS)
        V = V(60, SSS)
        V = V(2002, 3, 19,  7, 47, V=V)
        V = V(2002, 3, 19, 12, 47, V=V)
        V = V(2002, 3, 19, 13, 47, V=V)
        self.V(V.V, V)
        self.V(V.V, V)
        self.V(V.V, V)
        self.V(V.V(), V(V=-300))
        self.V(V.V(), V(V=0))
        self.V(V.V(), V(V=60))
        self.V(V.V(), SSS)
        self.V(V.V(), SSS)
        self.V(V.V(), SSS)
        self.V(hash(V), hash(V))
        self.V(hash(V), hash(V))
        self.V(hash(V), hash(V))
        self.V(V, V)
        self.V(V, V)
        self.V(V, V)
        self.V(str(V), SSS)
        self.V(str(V), SSS)
        self.V(str(V), SSS)
        V = SSS
        self.V(repr(V), V + SSS)
        self.V(repr(V), V + SSS)
        self.V(repr(V), V + SSS)
    def F(self):
        V = V(60, SSS)
        V = V(2002, 3, 4)
        V = V(18, 45, 3, 1234, V=V)
        V = V.V(V, V)
        self.V(V, V(2002, 3, 4, 18, 45, 3, 1234,
                                        V=V))
    def F(self):
        V = V(60, SSS)
        V = self.V(2002, 3, 4, 18, 45, 3, 1234, V=V)
        self.V(V.V(), V(2002, 3, 4))
        self.V(V.V(), V(18, 45, 3, 1234))
        self.V(V.V(), V(18, 45, 3, 1234, V=V))
    def F(self):
        V = self.V.V()
        V = V(-330, SSS)
        V = V.V().V(V=V)
        V = self.V.V(V.V(), V)
        self.V(V.V, V)
        self.V(V.V(), V)
        self.V(TypeError, lambda: V - V)
        self.V(TypeError, lambda: V - V)
        self.V(TypeError, lambda: V + V)
        self.V(TypeError, lambda: V + V)
        self.V(TypeError, lambda: V + V)
        self.V(V - V, V(0))
        self.V(V - V, V(0))
        V = V(V=1, V=12, V=5678)
        V = V + V
        self.V(V.V, V)
        V = V + V
        self.V(V.V, V)
        self.V(V, V)
        V = V - V
        self.V(V.V, V)
        self.V(V, V)
        self.V(TypeError, lambda: V - V)
        self.V(V - V, V)
        V = V(V.V(-1439, 1440), SSS)
        V = V.V(V=V)
        self.V(V.V, V)
        V = V - V
        V = V.V() - V.V() - V
        self.V(V, V)
        min = self.V(1, 1, 1, V=V(1439, SSS))
        max = self.V(V, 12, 31, 23, 59, 59, 999999,
                            V=V(-1439, SSS))
        V = max - min
        self.V(V, self.V.V - self.V.V +
                                  V(V=2*1439))
        V = V(V, SSS)
        V = V(V, SSS)
        V = min.V(V=V) - max.V(V=V)
        self.V(V, self.V.V - self.V.V)
    def F(self):
        V = self.V.V
        V = V()
        V = V(42, SSS)
        V = V(V)
        V = V(V=V)
        self.V(V.V, V.V)
        self.V(V.V(), V(V=42))
        self.V(TypeError, V, 16)
        self.V(TypeError, V, V=16)
        self.V(TypeError, V, V=V)
        self.V(TypeError, V, V, V)
        V = V(0, SSS, 0)
        for V in [V(V(V=15, V=58), SSS, 0),
                        V(V(V=15, V=58), SSS),]:
            for V in range(3):
                V = V.V(V)
                self.V(V.V, V)
                V = V.V().V(V=V)
                V = V.V(V)
                if abs(V - V) < V(V=30):
                    break
            else:
                self.V(SSS)
    def F(self):
        import time
        V = self.V.V
        V = V.V()
        V = V(V)
        V = V(42, SSS)
        V = V(V, V)
        V = V(V, V=V)
        self.V(V.V, V.V)
        self.V(V.V(), V(V=42))
        self.V(TypeError, V, V, 16)
        self.V(TypeError, V, V, V=16)
        self.V(TypeError, V, V, V=V)
        self.V(TypeError, V, V, V, V)
        self.V(TypeError, V)
        V = 1000000000
        V = V.V(V)
        V = V(V=-15, V=39) 
        V = V(V, SSS, 0)
        V = V + V
        V = V.V(V, V)
        self.V(V, V.V(V=None))
    def F(self):
        V = self.V.V
        V = V()
        V = V(42, SSS)
        self.V(TypeError, V, V)
        self.V(TypeError, V, V=V)
    def F(self):
        import time
        V = self.V.V
        V = V.V()
        V = V(V)
        V = V(42, SSS)
        self.V(TypeError, V, V, V)
        self.V(TypeError, V, V, V=V)
    def F(self):
        class DST(V):
            def F(self, V):
                if isinstance(V, int):
                    V = V(V=V)
                self.V = V
            def F(self, V):
                return self.V
        cls = self.V
        for V, V in (-33, 1), (33, 1), (0, 0), (None, -1):
            V = cls(1, 1, 1, 10, 20, 30, 40, V=V(V))
            V = V.V()
            self.V(1, V.V)
            self.V(1, V.V)
            self.V(1, V.V)
            self.V(10, V.V)
            self.V(20, V.V)
            self.V(30, V.V)
            self.V(0, V.V)
            self.V(1, V.V)
            self.V(V, V.V)
        self.V(TypeError, cls(1, 1, 1, V=V(SSS)).V)
        self.V(cls(1,1,1, V=V(1439)).V().V, 1)
        self.V(cls(1,1,1, V=V(-1439)).V().V, 1)
        self.V(ValueError, cls(1,1,1, V=V(1440)).V)
        self.V(ValueError, cls(1,1,1, V=V(-1440)).V)
    def F(self):
        class DST(V):
            def F(self, V=0):
                if isinstance(V, int):
                    V = V(V=V)
                self.V = V
            def F(self, V):
                return self.V
        cls = self.V
        self.V(NotImplementedError,
                          cls(1, 1, 1, V=V(0)).V)
        class UOFS(V):
            def F(self, V, V=None):
                V.F(self, V)
                self.V = V(V=V)
            def F(self, V):
                return self.V
        for V in -33, 33, 0, None:
            V = cls(1, 2, 3, 10, 20, 30, 40, V=V(-53, V))
            V = V.V()
            self.V(V.V, V.V)
            self.V(V.V, V.V)
            self.V(V.V, V.V)
            self.V(11, V.V) 
            self.V(13, V.V)
            self.V(V.V, V.V)
            self.V(V.V(), V.V)
            self.V(V.V() - V(1, 1, 1).V() + 1,
                             V.V)
            self.V(0, V.V)
        V = cls(1, 2, 3, 10, 20, 30, 40)
        V = V.V()
        self.V(V[:-1], V.V()[:-1])
        self.V(0, V.V)
        class NOFS(V):
            def F(self, V):
                return None
        V = cls(1, 2, 3, 10, 20, 30, 40, V=V())
        V = V.V()
        self.V(V[:-1], V.V()[:-1])
        self.V(0, V.V)
        class BOFS(V):
            def F(self, V):
                return SSS
        V = cls(1, 2, 3, 10, 20, 30, 40, V=V())
        self.V(TypeError, V.V)
        V = cls(2010, 11, 13, 14, 15, 16, 171819)
        for V in [V.V, V.V, V.V]:
            V = V.V(V=V)
            self.V(V.V()[:-1],
                             V.V(V.V).V()[:-1])
        V = cls(V, 1, 1, 0, 0, 37, V=V(1439))
        self.V(OverflowError, V.V)
        V = cls(V, 12, 31, 23, 59, 37, 999999, V=V(-1439))
        self.V(OverflowError, V.V)
        V = cls.V.V(V=V(V))
        self.V(OverflowError, V.V)
        V = cls.V.V(V=V(-V))
        self.V(OverflowError, V.V)
    def F(self):
        V = V(0, SSS)
        V = V(220, SSS)
        V = V(-231, SSS)
        V = V(None, SS)
        cls = self.V
        V = SSS
        for V in None, V, V, V, V:
            for V in 0, 987001:
                V = cls(1, 2, 3, 4, 5, 59, V, V=V)
                V = SSS + (V and SSS or SS)
                V = V is not None and V.V() or SS
                V = V + V
                V = V.V()
                self.V(V, V + SSS + V)
                self.V(V, V.V(SSS))
                self.V(V.V(SSS), V + SSS + V)
                self.V(V.V(SSS), V + SSS + V)
                self.V(str(V), V + SSS + V)
    def F(self):
        cls = self.V
        V = V(100, SSS)
        V = V(V(V=-200), SSS)
        V = [1, 2, 3, 4, 5, 6, 7, V]
        V = cls(*V)
        self.V(V, V.V())
        V = 0
        for V, V in ((SSS, 2),
                             (SSS, 3),
                             (SSS, 4),
                             (SSS, 5),
                             (SSS, 6),
                             (SSS, 7),
                             (SSS, 8),
                             (SSS, V)):
            V = V[:]
            V[V] = V
            V = cls(*V)
            V = V.V(**{V: V})
            self.V(V, V)
            V += 1
        self.V(V.V(), SSS)
        V = V.V(V=None)
        self.V(V.V)
        self.V(V.V())
        V = V.V(V=V)
        self.V(V, V)
        self.V(V.V, V.V)
        V = cls(2000, 2, 29)
        self.V(ValueError, V.V, V=2001)
    def F(self):
        V = V(None, SSS)
        V = V(44, SSS)
        V = V(-V(V=5), SSS)
        V = self.V.V(V=V)
        self.V(V.V, V)
        self.V(ValueError, V.V, V)
        V = V.V(V.V)
        self.V(V.V, V)
        self.V(V.V(), V.V())
        self.V(V.V(), V.V())
        V = V.V(V)
        self.V(V.V, V)
        self.V(V.V(), V(V=-5))
        V = V - V.V()  
        V += V.V(V)  
        V = V.V(V=V) 
        self.V(V.V(), V.V())
        self.V(V.V(), V.V())
        self.V(V.V(), V.V())
        self.V(V.V, V.V)
        self.V(V, V)
    @support.V(SSS)
    def F(self):
        V = self.V.V(V.V)
        self.V(V.V(None), V)
        self.V(V.V(), V)
    @support.V(SSS)
    def F(self):
        V = self.V(2012, 11, 4, 6, 30, V=V.V)
        V = V.V()
        self.V(V, V)
        self.V(V.V(SSSSSS), SSS)
        V = self.V(2012, 11, 4, 5, 30, V=V.V)
        V = V.V()
        self.V(V, V)
        self.V(V.V(SSSSSS), SSS)
    @support.V(SSS)
    def F(self):
        V = V(2015, 11, 1, 5, V=V.V)
        V = V.V()
        V = V.V()
        self.V(V.V, V.V)
    def F(self):
        cls = self.V
        class OperandDependentOffset(V):
            def F(self, V):
                if V.V < 10:
                    return V(V=V.V)
                else:
                    return V(V=59)
        V = cls(8, 9, 10, 11, 12, 13, 14, V=V())
        V = V.V(V=3)
        V = V.V(V=9)
        V = V.V(V=11)
        for V in V, V, V:
            for V in V, V, V:
                V = V - V
                V = V(V=V.V - V.V)
                self.V(V, V)
        V = cls(8, 9, 10, 11, 12, 13, 14)
        V = V.V(V=3, V=V())
        V = V.V(V=9, V=V())
        V = V.V(V=11, V=V())
        for V in V, V, V:
            for V in V, V, V:
                V = V - V
                if (V is V or V is V) and (V is V or V is V):
                    V = V(0)
                elif V is V is V:
                    V = V(0)
                elif V is V:
                    V = V(V=(11-59)-0)
                else:
                    assert V is V
                    V = V(V=0-(11-59))
                self.V(V, V)
    def F(self):
        V = V(1, 2, 3, 4, 5, 6, 7)
        V = V(1, 2, 3, 4, 5, 6, 7)
        self.V(V, V)
        V = V.V(V=None)
        self.V(V, V)
        V = V.V(V=V(None, SS))
        self.V(V, V)
        V = V.V(V=V(0, SS))
        self.V(V, V)
        class Varies(V):
            def F(self):
                self.V = V(V=22)
            def F(self, V):
                self.V += V(V=1)
                return self.V
        V = V()
        V = V.V(V=V)
        V = V.V(V=V)
        self.V(V.V(), V(V=23))
        self.V(V.V(), V(V=24))
        self.V(V, V)
        V = V.V(V=V())
        self.V(V < V)  
    def F(self):
        class C(self.V):
            V = 42
            def F(cls, *V, **V):
                V = V.V()
                V = V.V(SSS)
                V = self.V.F(cls, *V, **V)
                V.V = V
                return V
            def F(self, V):
                return V + self.V + self.V
        V = 2002, 12, 31, 4, 5, 6, 500, V(-300, SSS, 1)
        V = self.V(*V)
        V = V(*V, **{SSS: 7})
        self.V(V.__class__, V)
        self.V(V.V, 42)
        self.V(V.V, 7)
        self.V(V.V(), V.V())
        self.V(V.V(-7), V.V + V.V - 7)
def F(V):
    V = 6 - V.V()
    if V:
        V += V(V)
    return V
V = V(0)
V = V(V=1)
V = V(V=1)
V = V(V=1)
V = V(1, 4, 1, 2)
V = V(1, 10, 25, 1)
class USTimeZone(V):
    def F(self, V, V, V, V):
        self.V = V(V=V)
        self.V = V
        self.V = V
        self.V = V
    def F(self):
        return self.V
    def F(self, V):
        if self.V(V):
            return self.V
        else:
            return self.V
    def F(self, V):
        return self.V + self.V(V)
    def F(self, V):
        if V is None or V.V is None:
            return V
        assert V.V is self
        V = V(V.V(V=V.V))
        assert V.V() == 6 and V.V == 4 and V.V <= 7
        V = V(V.V(V=V.V))
        assert V.V() == 6 and V.V == 10 and V.V >= 25
        if V <= V.V(V=None) < V:
            return V
        else:
            return V
V  = V(-5, SSS,  SSS, SSS)
V  = V(-6, SSS,  SSS, SSS)
V = V(-7, SSS, SSS, SSS)
V  = V(-8, SSS,  SSS, SSS)
V = V(0, SSS, 0)
V = V(-12*60, SSS, 0)
class TestTimezoneConversions(V.V):
    V = V(2002, 4, 7, 2)
    V = V(2002, 10, 27, 1)
    V = V
    def F(self, V, V, V, V, V):
        self.V(V.V(), V)
        self.V(V.V(V), V)
        V = V.V(V)
        V = V.V(V)
        if V.V() == V.V() and V.V == 2:
            self.V(V + V, V)
            self.V(V.V(), V)
            self.V(V.V(V),
                             V.V(V))
        else:
            self.V(V, V)
        V = V + V
        V = V.V(V)
        if V.V() == V.V() and V.V == 0:
            self.V(V, V.V(V=1))
            V += V
            V = V.V(V)
            self.V(V, V.V(V=1))
        else:
            self.V(V - V, V)
    def F(self, V, V, V):
        self.V(V.V(), V)
        self.V(V.V(V), V)
        V = V.V(V)
        V = V.V(V)
        self.V(V, V)
    def F(self, V, V):
        V = self.V.V(V=V)
        V = self.V.V(V=V)
        for V in (V(V=13),
                      V,
                      V,
                      V(V=1),
                      V(V=1)):
            self.V(V, V, V, V, V)
            for V in V + V, V - V:
                self.V(V, V, V, V, V)
            self.V(V, V, V)
            for V in V - V, V + V:
                self.V(V, V, V)
    def F(self):
        self.V(V, V)
        self.V(V, V)
        self.V(V, V)
        self.V(V, V)
        self.V(V, V)
        self.V(V, V)
    def F(self):
        V = self.V - V(V=4)
        V = V(-9*60, SSS, 0)
        V = V.V(V=V)
        V = self.V.V(V=3)
        V = V.V(V).V(V=None)
        self.V(V, V)
        V = self.V.V(V=6, V=V)
        V = self.V.V(V=1)
        V = V.V(V).V(V=None)
        self.V(V, V)
        for V in V, V:
            for V in V, V:
                V = self.V - V(V=2) 
                V -= V.V(None)
                V = V + V.V(None)
                V = V.V(V=V)
                for V in (0, 1, 1, 2):
                    V = self.V.V(V=V)
                    for V in 0, 30, 59:
                        V = V.V(V=V)
                        V = V.V(V=V)
                        V = V.V(V)
                        self.V(V.V(V=None), V)
                    V += V
    def F(self):
        class ok(V):
            def F(self, V): return V
            def F(self, V): return V
        V = self.V.V().V(V=V)
        V.V(V())
        class notok(V):
            def F(self, V): return None
        self.V(ValueError, V.V, V())
        class tricky_notok(V):
            def F(self, V):
                if V.V == 2000:
                    return None
                else:
                    return 10*V
        V = self.V(2001, 1, 1).V(V=V)
        self.V(ValueError, V.V, V())
    def F(self):
        self.V(TypeError, V.V)   
        V = V.V().V(V=V)
        self.V(ValueError, V.V, V) 
        V = V.V(V=V)   
        V = V.V(V)         
        self.V(V.V, V) 
        self.V(TypeError, V.V, V, V) 
        self.V(TypeError, V.V, V.V()) 
        class FauxUSTimeZone(V):
            def F(self, V):
                return V + self.V
        V  = V(-5, SSS,  SSS, SSS)
        V = self.V.V(V=4, V=V)
        V = V.V(V=V)
        for V in 23, 0, 1, 3, 4, 5:
            V = V.V(V=V)
            if V == 23:
                V -= V(V=1)
            V = V.V(V)
            self.V(V, V)
            V = V + V.V
            V = V.V(V)
            self.V(V, V)
            V = V.V(V=V).V(V)
            self.V(V, V)
            V += V
            V += V
        V = self.V.V(V=4, V=V)
        V = V.V(V=V)
        for V in 0, 1, 1, 2, 3, 4:
            V = V.V(V=V)
            V = V.V(V)
            self.V(V, V)
            V = V + V.V
            V = V.V(V)
            self.V(V, V)
            V = V.V(V=V).V(V)
            self.V(V, V)
            V += V
            V += V
class Oddballs(V.V):
    def F(self):
        V = V.V()
        V = V.V(V, V())
        self.V(V != V)
        self.V(V != V)
        self.V(V == V)
        self.V(V == V)
        self.V(TypeError, lambda: V < V)
        self.V(TypeError, lambda: V < V)
        self.V(TypeError, lambda: V <= V)
        self.V(TypeError, lambda: V <= V)
        self.V(TypeError, lambda: V > V)
        self.V(TypeError, lambda: V > V)
        self.V(TypeError, lambda: V >= V)
        self.V(TypeError, lambda: V >= V)
        self.V(V.F(V), True)
        V = (V.V + 1) % 20 + 1
        V = V.V(V= V)
        self.V(V.F(V), False)
        V = V(V.V, V.V, V.V)
        self.V(V, V)
        self.V(V, V)
        V = V(V.V, V.V,
                                       V.V, 0, 0, 0)
        self.V(V, V)
        self.V(V, V)
    def F(self):
        for V in [V.V(),
                  V(),
                  V.V(),
                  V(),
                  V(),
                  V(V())]:
            with self.V(AttributeError):
                V.V = 1
    def F(self):
        class Number:
            def F(self, V):
                self.V = V
            def F(self):
                return self.V
        class Float(float):
            pass
        for V in [10.0, V(10.9),
                   V.V(10), V.V(SSS),
                   V(10), V(10.9),
                   SSS]:
            self.V(TypeError, V, V, 10, 10, 10, 10, 10, 10)
            self.V(TypeError, V, 10, V, 10, 10, 10, 10, 10)
            self.V(TypeError, V, 10, 10, V, 10, 10, 10, 10)
            self.V(TypeError, V, 10, 10, 10, V, 10, 10, 10)
            self.V(TypeError, V, 10, 10, 10, 10, V, 10, 10)
            self.V(TypeError, V, 10, 10, 10, 10, 10, V, 10)
            self.V(TypeError, V, 10, 10, 10, 10, 10, 10, V)
class tzinfo2(V):
    def F(self, V):
        SSS
        if not isinstance(V, V):
            raise TypeError(SSS)
        if V.V is not self:
            raise ValueError(SSS)
        V = V.V(V=0).V()
        V = V.V(V=1).V()
        if V is None or V is None or V.V() is None:
            raise ValueError
        if V == V:
            V = V + V
            V = V.V()
            if V == V:
                return V
        for V in [V, V]:
            V = V + V
            if V.V() == V:
                return V
            V = V.V(V=1)
            if V.V() == V:
                return V
        raise ValueError(SSS)
class USTimeZone2(V):
    def F(self, V, V, V, V):
        self.V = V(V=V)
        self.V = V
        self.V = V
        self.V = V
    def F(self):
        return self.V
    def F(self, V):
        if self.V(V):
            return self.V
        else:
            return self.V
    def F(self, V):
        return self.V + self.V(V)
    def F(self, V):
        if V is None or V.V is None:
            return V
        assert V.V is self
        V = V(V.V(V=V.V))
        assert V.V() == 6 and V.V == 4 and V.V <= 7
        V = V(V.V(V=V.V))
        assert V.V() == 6 and V.V == 10 and V.V >= 25
        V = V.V(V=None)
        if V + V <= V < V:
            return V
        elif V <= V < V + V:
            return V if V.V else V
        elif V <= V < V + V:
            return V if V.V else V
        else:
            return V
V  = V(-5, SSS,  SSS, SSS)
V  = V(-6, SSS,  SSS, SSS)
V = V(-7, SSS, SSS, SSS)
V  = V(-8, SSS,  SSS, SSS)
class Europe_Vilnius_1941(V):
    def F(self):
        return [V(1941, 6, 23, 21, V=self),  
                V(1941, 6, 23, 22, V=self)]  
    def F(self):
        return [V(1941, 6, 23, 23, V=self),  
                V(1941, 6, 24, 0, V=self)]   
    def F(self, V):
        V, V = self.V()
        if V < V:
            return 3 * V
        if V < V:
            return (2 if V.V else 3) * V
        return 2 * V
    def F(self, V):
        V, V = self.V()
        if V < V:
            return 0 * V
        if V < V:
            return (1 if V.V else 0) * V
        return 1 * V
    def F(self, V):
        V, V = self.V()
        if V < V:
            return SSS
        if V < V:
            return (SSS, SSS)[V.V]
        return SSS
    def F(self, V):
        assert V.V == 0
        assert V.V is self
        if V.V != 1941:
            raise NotImplementedError
        V, V = self.V()
        if V < V:
            return V + 3 * V
        if V < V:
            return (V + 2 * V).V(V=1)
        return V + 2 * V
class TestLocalTimeDisambiguation(V.V):
    def F(self):
        V = V()
        V = V(1941, 6, 23, 20, 59, 59, V=V.V)
        V = V.V(V)
        self.V(V.V(SSSSSSSS),
                         SSS)
        self.V(V.V, 0)
        self.V(V.V())
        V = V(1941, 6, 23, 21, V=V.V)
        V = V.V(V)
        self.V(V.V(SSSSSSSS),
                         SSS)
        self.V(V.V, 1)
        self.V(V.V())
        V = V(1941, 6, 23, 22, V=V.V)
        V = V.V(V)
        self.V(V.V(SSSSSSSS),
                         SSS)
        self.V(V.V, 0)
        self.V(V.V())
    def F(self):
        V = V()
        V = V(1941, 6, 23, 22, 59, 59, V=V)
        V = V.V(V.V)
        self.V(V.V(SSSSSS),
                         SSS)
        V = V(1941, 6, 23, 23, 59, 59, V=V)
        V = V.V(V.V)
        self.V(V.V(SSSSSS),
                         SSS)
        V = V(1941, 6, 23, 23, 59, 59, V=V, V=1)
        V = V.V(V.V)
        self.V(V.V(SSSSSS),
                         SSS)
        V = V(1941, 6, 24, 0, V=V)
        V = V.V(V.V)
        self.V(V.V(SSSSSS),
                         SSS)
    def F(self):
        V = V(0, V=1)
        V = V(1, 1, 1, V=1)
        self.V(V.V, 1)
        self.V(V.V, 1)
        with self.V(TypeError):
            V(0, 0, 0, 0, None, 0)
    def F(self):
        V = V(1, 1, 1, V=1)
        V = V.V()
        self.V(V.V, 1)
        V = V.V()
        self.V(V.V, 1)
    def F(self):
        V = V(0)
        V = V(1, 1, 1)
        self.V(V.V(V=1).V, 1)
        self.V(V.V(V=1).V, 1)
        self.V(V.V(V=0).V, 0)
        self.V(V.V(V=0).V, 0)
        V = V.V(V=1, V=V)
        V = V.V(V=1, V=V)
        self.V(V.V(V=None).V, 1)
        self.V(V.V(V=None).V, 1)
        with self.V(ValueError):
            V.V(V=2)
        with self.V(ValueError):
            V.V(V=2)
        with self.V(TypeError):
            V.V(1, 1, 1, None, 1)
        with self.V(TypeError):
            V.V(1, 1, 1, 1, 1, 1, 1, None, 1)
    def F(self):
        V = V(0)
        V = V(1, 1, 1)
        self.V(V, V.V(V=1))
        self.V(V, V.V(V=1))
    def F(self):
        V = V(0)
        V = V(1, 1, 1)
        self.V(hash(V), hash(V.V(V=1)))
        self.V(hash(V), hash(V.V(V=1)))
    @support.V(SSS)
    def F(self):
        V = 1414906200
        V = V.V(V)
        V = V.V(V + 3600)
        self.V(V.V, 0)
        self.V(V.V, 1)
    @support.V(SSS)
    def F(self):
        V = V.V(1.4e9)
        if V.V(SSSSSS, V) != SSS:
            self.V(SSS)
        V = 1428158700
        V = V.V(V)
        V = V.V(V + 1800)
        self.V(V, V)
        self.V(V.V, 0)
        self.V(V.V, 1)
    def F(self):
        self.V(V.V(0).V, 0)
    @support.V(SSS)
    def F(self):
        V = V(2014, 11, 2, 1, 30)
        V = V.V(V=1)
        self.V(V.V() + 3600,
                         V.V())
    @support.V(SSS)
    def F(self):
        V = V.V(1.4e9)
        if V.V(SSSSSS, V) != SSS:
            self.V(SSS)
        V = V(2015, 4, 5, 1, 45)
        V = V.V(V=0).V()
        V = V.V(V=1).V()
        self.V(V + 1800, V)
    @support.V(SSS)
    def F(self):
        V = V(2014, 11, 2, 1, 30)
        V = V.V(V=1)
        V = V.V()
        V = V.V()
        self.V(V.V(), SSS)
        self.V(V.V(), SSS)
        self.V(V + V, V)
        self.V(V.V, 0)
        self.V(V.V, 0)
    def F(self):
        V = V(V=1)
        V = V(1, 1, 1, V=1)
        for V, V, V in V:
            for V in [V, V]:
                V = V.V(V, V)
                V = V.V(V)
                self.V(V, V)
                self.V((0 if V < 4 else V.V), V.V)
    def F(self):
        V = V(V=1)
        V = V(1, 1, 1, V=1)
        self.V(repr(V), SSS)
        self.V(repr(V),
                         SSS)
    def F(self):
        V = V(2002, 10, 27, 1, V=V) - V.V
        V = V(2002, 10, 27, 2, V=V)
        self.V(V.V(), V)
        self.V(V.V(), V)
        self.V(V.V(V=1).V(), V)
        self.V(V.V(V=1).V(), V)
        for V in [0, 30, 59]:
            V = V(2002, 10, 27, 1, V, V=V)
            self.V(V.V(), V)
            self.V(V.V(V=1).V(), V)
        for V in [0, 30, 59]:
            V = V(2002, 4, 7, 2, V, V=V)
            self.V(V.V(), V)
            self.V(V.V(V=1).V(), V)
    def F(self):
        V = V(2002, 10, 27, 1, V=V) - V.V
        V = V(2002, 10, 27, 2, V=V)
        self.V(V.V(), -4 * V)
        self.V(V.V(), -5 * V)
        self.V(V.V(V=1).V(), -4 * V)
        self.V(V.V(V=1).V(), -5 * V)
    def F(self):
        V = V(2002, 10, 27, 6, V=V) - V.V
        V = V(2002, 10, 27, 7, V=V)
        V = V.V(V)
        V = V.V(V)
        self.V(V, V - 4 * V)
        self.V(V, V - 5 * V)
        self.V(V.V, 0)
        self.V(V.V, 0)
        V = V(2002, 10, 27, 5, 30, V=V)
        V = V.V(V)
        V += V
        V = V.V(V)
        self.V(V, V)
        self.V(V.V, 0)
        self.V(V.V, 1)
        V = V(2002, 10, 27, 1, 30, V=V)
        V = V.V(V)
        self.V((V.V, V.V), (26, 21))
        V = V(2002, 10, 27, 6, 30, V=V)
        V = V.V(V)
        self.V((V.V, V.V), (27, 1))
        V = V(2002, 4, 7, 2, 0, V=V)
        V = V.V(V)
        self.V((V.V, V.V), (6, 21))
    def F(self):
        V = V(2000, 1, 1, V=V)
        self.V(V, V.V(V.V))
        V = V(2000, 6, 1, V=V)
        self.V(V, V.V(V.V))
    def F(self):
        V = V(2002, 10, 27, 1, 45, V=V)
        V = V.V(V.V)
        self.V(V, V)
        self.V(V, V)
    def F(self):
        V = V(2002, 4, 7, 2, 45, V=V)
        V = V.V(V.V)
        self.V(V, V)
        self.V(V, V)
    def F(self):
        V = V(2000, 1, 1, V=V)
        self.V(hash(V), hash(V.V(V=1)))
        V = V(2002, 10, 27, 1, 45, V=V)
        V = V(2002, 4, 7, 2, 45, V=V)
        self.V(hash(V), hash(V.V(V=1)))
        self.V(hash(V), hash(V.V(V=1)))
V = V(0, 1)
def F(V):
    V, V = V.V(V)
    next(V, None)
    return zip(V, V)
class ZoneInfo(V):
    V = SSS
    def F(self, V, V):
        S
        self.V = V
        self.V = V
        self.V = self.V(V, V)
    @staticmethod
    def F(V, V):
        V = (V(SSS, V), V(SSS, V))
        if V:
            V = V[0][0] // V
            V[0][0] += V
            V[1][0] += V
            for V in range(1, len(V)):
                V[0][V] += V[V-1][0] // V
                V[1][V] += V[V][0] // V
        return V
    @classmethod
    def F(cls, V):
        if V.V(4).V() != SSS:
            raise ValueError(SSS)
        V.V(32)
        V = V(SSS)
        V.V(V, 3)
        if V.V != SSS:
            V.V()
        V = V(SSS)
        V.V(V, V[0])
        if V.V != SSS:
            V.V()
        V = V(SSS)
        V.V(V, V[0])
        V = []
        for V in range(V[1]):
            V.V(V.V(SSS, V.V(6)))
        V = V.V(V[2])
        for V, (V, V, V) in enumerate(V):
            V = V[V:V.V(0, V)].V()
            V[V] = (V(0, V), V, V)
        V = [None] * len(V)
        for V, V in enumerate(V):
            V[V] = V[V]
        self = cls(V, V)
        return self
    @classmethod
    def F(cls, V):
        V = V.V.V(cls.V, V)
        with open(V, SSS) as V:
            return cls.V(V)
    V = V(1970, 1, 1).V()
    def F(self, V):
        S
        if not isinstance(V, V):
            raise TypeError(SSS)
        if V.V is not self:
            raise ValueError(SSS)
        V = ((V.V() - self.V) * 86400
                     + V.V * 3600
                     + V.V * 60
                     + V.V)
        if V < self.V[1]:
            V = self.V[0]
            V = 0
        else:
            V = V.V(self.V, V)
            assert self.V[V-1] <= V
            assert V == len(self.V) or V < self.V[V]
            V, V = self.V[V-2:V]
            V = V[0] - V[0]
            V = (V > V(0, V - self.V[V-1]))
        V += V[0]
        if V:
            return V.V(V=1)
        else:
            return V
    def F(self, V, V):
        V = ((V.V() - self.V) * 86400
             + V.V * 3600
             + V.V * 60
             + V.V)
        V = self.V[V.V]
        V = V.V(V, V)
        return self.V[max(0, V - 1)][V]
    def F(self, V):
        return self.V(V, 0)
    def F(self, V):
        V = self.V(V, 1)
        return V if V else V
    def F(self, V):
        return self.V(V, 2)
    @classmethod
    def F(cls, V=None):
        if V is None:
            V = cls.V
        V = V.V.V(V, SSS)
        try:
            V = open(V)
        except OSError:
            return
        with V:
            for V in V:
                V = V.V()
                if V and not V.V(SSS):
                    yield V.V()[2]
    @classmethod
    def F(cls, V=1):
        V = V = V = V = 0
        V = V = V.V
        V = V = V
        V = V = V.V
        V = V = None
        V = V = V.V
        V = V = None
        V = V(V, 1, 1) 
        for V in cls.V():
            V += 1
            V = cls.V(V)
            for V, V in V.V():
                if V < V:
                    continue
                if V > V:
                    V += 1
                    if (V, V) > (V, V):
                        V = V
                        V = V
                        V = V
                    if (V, V.V - V) < (V, V.V - V):
                        V = V
                        V = V
                        V = V
                elif V < V:
                    V += 1
                    V = -V
                    if (V, V) > (V, V):
                        V = V
                        V = V
                        V = V
                    if (V, V.V - V) < (V, V.V - V):
                        V = V
                        V = V
                        V = V
                else:
                    V += 1
        V = (V, V, V)
        print(SSSS % V)
        print(SSSSSSSSSSS %
              ((sum(V),) + V))
        print(SSSSSSSS % (V, V, V))
        print(SSSSSSSS % (V, V, V))
        print(SSSSSSSS % (V, V, V))
        print(SSSSSSSS % (V, V, V))
    def F(self):
        for (V, V), (V, V) in V(zip(self.V, self.V)):
            V = V[0] - V[0]
            yield V.V(V), V
    def F(self):
        S
        for (V, V), (V, V) in V(zip(self.V, self.V)):
            V = V[0] - V[0]
            if V < V and V[1] == V[1]:
                yield V.V(V), -V, V[2], V[2]
    @classmethod
    def F(cls, V=False, V=1):
        V = 0
        for V in cls.V():
            V = cls.V(V)
            for V, V, V, V in V.V():
                if V.V < V or V and V != V:
                    continue
                V += 1
                print(SSSSSSSSSSSSS %
                      (V, V, V, V, V, V))
    def F(self):
        for V, V in self.V():
            if V < V:
                yield V, -V
    def F(self):
        for V, V in self.V():
            if V > V:
                yield V, V
    def F(self):
        for V, V in self.V():
            if not V:
                yield V
class ZoneInfoTest(V.V):
    V = SSS
    def F(self):
        if V.V == SSS:
            self.V(SSS)
        if V.V == SSS:
            self.V(SSS)
        try:
            self.V = V.V(self.V)
        except FileNotFoundError as V:
            self.V(SSSSSS % (self.V, V))
    def F(self, V, V):
        self.V((V.V(V=None), V.V, id(V.V)),
                         (V.V(V=None), V.V, id(V.V)))
    def F(self):
        V = self.V
        for V, V in V.V():
            for V in [0 * V, 0.5 * V, V - V.V]:
                V = V + V
                V = V.V(V.V(V=V))
                self.V(V.V, 1)
                V = V.V(V=V.V).V(V)
                self.V(V, V)
                V = V.V()
                self.V(V.V(V=None), V + V)
                self.V(V.V(V.V),
                                          V.V(V=V.V))
            for V in [-V.V, V]:
                V = V + V
                V = V.V(V=V)
                V = V.V(V)
                self.V(V.V, 0)
    def F(self):
        V = self.V
        for V, V in V.V():
            for V in [0 * V, 0.5 * V, V - V.V]:
                V = V + V
                V = V.V(V=V)
                V = V.V(V)
                self.V(V.V, 0)
                V = V.V(V=V.V).V(V)
                self.V(V, V)
                V = V.V()
                self.V(V.V(V=None), V.V(V=None) + V)
                V = V.V(V.V(V=V)) - V + V
                self.V(V.V(V=1).V(),
                                V.V(V=0).V(),
                                SSSSS % V)
            for V in [-V.V, V]:
                V = V + V
                V = V.V(V.V(V=V))
                self.V(V.V, 0)
    def F(self):
        if (SSS in self.V or
                self.V.V(SSS)):
            self.V(SSSS % self.V)
        V = self.V
        V = V.V.V(SSS)
        V.V[SSS] = self.V
        try:
            V.V()
            for V, V in V.V():
                if V.V >= 2037:
                    break
                V = (V - V(1970, 1, 1)) // V
                V = V // V   
                for V in [-40 * 3600, -20*3600, -1, 0,
                          V - 1, V + 20 * 3600, V + 40 * 3600]:
                    V = V + V
                    V = V.V(V)
                    V = V.V(V, V).V(V=None)
                    self.V(V, V)
                    V = V.V()
                    self.V(V, V)
                if V > 0:  
                    V = V.V(V) - V / 2
                    V = V.V()
                    V = V.V(V=1).V()
                    self.V(V, V + V / 2)
                    self.V(V, V - V / 2)
        finally:
            if V is None:
                del V.V[SSS]
            else:
                V.V[SSS] = V
            V.V()
class ZoneInfoCompleteTest(V.V):
    def F(self):
        V = []
        if V(SSS):
            for V in V.V():
                V = type(SSSSS % V, (V,), {})
                V.V = V
                for V in dir(V):
                    if V.V(SSS):
                        V.V(V(V))
        super().F(V)
class IranTest(V):
    V = SSS
@unittest.V(V is None, SSS)
class CapiTest(V.V):
    def F(self):
        if self.__class__.__name__.V(SSS):
            self.V(SSS)
        V.V()
    def F(self):
        for V in (True, False):
            V = V.V(V)
            with self.V(V=V):
                self.V(V, V.V)
    def F(self):
        V, V, V = V.V()
        V = V(V(V=-5), SSS)
        V = V(V(V=-5))
        V = [
            (SSS, V, V),
            (SSS, V, V),
            (SSS, V, V)
        ]
        for V, V, V in V:
            with self.V(V=V):
                self.V(V, V)
                V = V(2000, 2, 4, V=V)
                V = V(2000, 2, 4, V=V)
                self.V(V, V)
                self.V(V.V(), V.V())
                V = V(2000, 2, 4, 5, V=V.V)
                self.V(V.V(V.V), V)
    def F(self):
        class TimeDeltaSubclass(V):
            pass
        for V in [V, V]:
            for V in [(26, 55, 99999), (26, 55, 99999)]:
                V = V(*V)
                with self.V(cls=V, V=V):
                    V, V, V = V.V(V)
                    self.V(V, V.V)
                    self.V(V, V.V)
                    self.V(V, V.V)
    def F(self):
        class DateSubclass(V):
            pass
        for V in [V, V]:
            for V in [(2000, 1, 2), (2012, 2, 29)]:
                V = V(*V)
                with self.V(cls=V, V=V):
                    V, V, V = V.V(V)
                    self.V(V, V.V)
                    self.V(V, V.V)
                    self.V(V, V.V)
    def F(self):
        class DateTimeSubclass(V):
            pass
        for V in [V, V]:
            for V in [(1993, 8, 26, 22, 12, 55, 99999),
                         (1993, 8, 26, 22, 12, 55, 99999,
                          V.V)]:
                V = V(*V)
                with self.V(cls=V, V=V):
                    V, V, V, V, V = \
                                            V.V(V)
                    self.V(V, V.V)
                    self.V(V, V.V)
                    self.V(V, V.V)
                    self.V(V, V.V)
                    self.V(V, V.V)
    def F(self):
        class TimeSubclass(V):
            pass
        for V in [V, V]:
            for V in [(12, 30, 20, 10),
                         (12, 30, 20, 10, V.V)]:
                V = V(*V)
                with self.V(cls=V, V=V):
                    V, V, V, V, V = \
                                              V.V(V)
                    self.V(V, V.V)
                    self.V(V, V.V)
                    self.V(V, V.V)
                    self.V(V, V.V)
                    self.V(V, V.V)
    def F(self):
        V, V, V = V.V()
        with self.V(V=SSS):
            self.V(V, V.V)
        with self.V(V=SSS):
            self.V(V, V.V)
        with self.V(V=SSS):
            self.V(V, V.V)
            V = V(V(V=0), SS)
            self.V(V, V)
            V = V(2000, 2, 4, V=V)
            V = V(2000, 2, 4, V=V)
            self.V(V, V)
            self.V(V.V(), V.V())
    def F(self):
        class DateSubclass(V):
            pass
        V = V(2011, 1, 1)
        V = V(2011, 1, 1)
        V = V(2011, 1, 1)
        V = V.V
        self.V(V(V))
        self.V(V(V))
        self.V(V(V))
        self.V(V(V, True))
        self.V(V(V, True))
        self.V(V(V, True))
        V = [tuple(), list(), 1, SSS,
                V(1), V.V, V(12, 00)]
        for V in V:
            for V in (True, False):
                with self.V(V=V, V=V):
                    self.V(V(V, V))
    def F(self):
        class TimeSubclass(V):
            pass
        V = V(12, 30)
        V = V(12, 30)
        V = V.V
        self.V(V(V))
        self.V(V(V))
        self.V(V(V, True))
        self.V(V(V, True))
        V = [tuple(), list(), 1, SSS,
                V(1), V.V, V(2011, 1, 1)]
        for V in V:
            for V in (True, False):
                with self.V(V=V, V=V):
                    self.V(V(V, V))
    def F(self):
        class DateTimeSubclass(V):
            pass
        V = V(2011, 1, 1, 12, 30)
        V = V(2011, 1, 1, 12, 30)
        V = V.V
        self.V(V(V))
        self.V(V(V))
        self.V(V(V, True))
        self.V(V(V, True))
        V = [tuple(), list(), 1, SSS,
                V(1), V.V, V(2011, 1, 1)]
        for V in V:
            for V in (True, False):
                with self.V(V=V, V=V):
                    self.V(V(V, V))
    def F(self):
        class TimeDeltaSubclass(V):
            pass
        V = V(1)
        V = V(1)
        V = V.V
        self.V(V(V))
        self.V(V(V))
        self.V(V(V, True))
        self.V(V(V, True))
        V = [tuple(), list(), 1, SSS,
                V.V, V(2011, 1, 1), V(2011, 1, 1)]
        for V in V:
            for V in (True, False):
                with self.V(V=V, V=V):
                    self.V(V(V, V))
    def F(self):
        class TZInfoSubclass(V):
            pass
        V = V()
        V = V()
        V = V(V(V=-5))
        V = V.V
        self.V(V(V))
        self.V(V(V))
        self.V(V(V))
        self.V(V(V, True))
        self.V(V(V, True))
        self.V(V(V, True))
        V = [tuple(), list(), 1, SSS,
                V(2011, 1, 1), V(2011, 1, 1)]
        for V in V:
            for V in (True, False):
                with self.V(V=V, V=V):
                    self.V(V(V, V))
    def F(self):
        V = V(1993, 8, 26)
        for V in False, True:
            with self.V(V=V):
                V = V.V(
                    V,
                    V.V,
                    V.V,
                    V.V)
                self.V(V, V)
    def F(self):
        V = V(1993, 8, 26, 22, 12, 55, 99999)
        for V in False, True:
            with self.V(V=V):
                V = V.V(
                    V,
                    V.V,
                    V.V,
                    V.V,
                    V.V,
                    V.V,
                    V.V,
                    V.V)
                self.V(V, V)
    def F(self):
        V = V(1993, 8, 26, 22, 12, 55, 99999)
        for V in [0, 1]:
            for V in False, True:
                with self.V(V=V, V=V):
                    V = V.V(
                        V,
                        V.V,
                        V.V,
                        V.V,
                        V.V,
                        V.V,
                        V.V,
                        V.V,
                        V.V)
                    self.V(V, V)
                    self.V(V.V, V.V)
    def F(self):
        V = V(22, 12, 55, 99999)
        for V in False, True:
            with self.V(V=V):
                V = V.V(
                    V,
                    V.V,
                    V.V,
                    V.V,
                    V.V)
                self.V(V, V)
    def F(self):
        V = V(22, 12, 55, 99999)
        for V in [0, 1]:
            for V in False, True:
                with self.V(V=V, V=V):
                    V = V.V(
                        V,
                        V.V,
                        V.V,
                        V.V,
                        V.V,
                        V.V)
                    self.V(V, V)
                    self.V(V.V, V.V)
    def F(self):
        V = V(26, 55, 99999)
        for V in False, True:
            with self.V(V=V):
                V = V.V(
                    V,
                    V.V,
                    V.V,
                    V.V)
                self.V(V, V)
    def F(self):
        V = V(1995, 4, 12).V()
        for V in False, True:
            with self.V(V=V):
                V = V.V(int(V), V)
                self.V(V, V(1995, 4, 12))
    def F(self):
        V = [
            ((1995, 4, 12), None, False),
            ((1995, 4, 12), None, True),
            ((1995, 4, 12), V(V(V=1)), True),
            ((1995, 4, 12, 14, 30), None, False),
            ((1995, 4, 12, 14, 30), None, True),
            ((1995, 4, 12, 14, 30), V(V(V=1)), True),
        ]
        V = V.V
        for V in V:
            for V in False, True:
                with self.V(V=V, V=V):
                    V, V, V = V
                    V = V(*V, V=V)
                    V = int(V.V())
                    V = V(V, V, V, V)
                    self.V(V, V)
def F(V, V, V):
    V.V(V())
    return V
if __name__ == SSS:
    V.V()