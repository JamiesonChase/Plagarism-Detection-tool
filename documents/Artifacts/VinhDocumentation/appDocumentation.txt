To run the application just do "flask run" on the command line.

When the link generated by flask is clicked on. The page will display two buttons
that allows the user to pick between loading the last comparison that was done
from a file in main directory or they can start a new comparison run. At the same 
time a new thread will be generated that will wait until the user click on 
something before it begins to do work.

If the user clicks on loading the previous comparison, flaks will go to a url
path that will change a variable to signify to the other thread that it should
load the pickle file on the main directory into a variable that will be used
by the main comaprison page to display the comaprison table. Once the thread is 
done loading everything it will signal that the page can stop being refreshed.

A similary process is done when the start new comparison button is clicked 
except that the thread will now go through the process of calculating the 
comparison percentage and when each file is calculated it will be added to 
the variable used by the main comaprison page and sorted in descending order.
Once all the calculation is done the thread will overwrite a new save that 
can be loaded and signal that the page can stop refreshing. Additionally
the thread will delete all previous html files in the templates/HTMLFiles/baseFiles
and templates/HTMLFiles/contentFiles.

The main comparison page will copy what is in the current variables that holds
all the file names and percentage calculation to avoid a race condition and 
then it will load a html template that will use jinja to go through the all 
the values and add them to the table on the page along with the href link that 
will take the user to the page showing the highlighting information. This link 
also contain the file names and unique id number that will be used to create the 
html page for the side by side comparison. If the percentage calculation is not 
done it will load the html template that will refersh the page every 3 seconds.
The problem with this method is it can be annoying to the user when the refresh 
is happening automatically. When all the percentage calculation is finished the 
page will stop reloading.

When the link on the comparison page is clicked, if a html file associated with 
that link exist than that page will be loaded. If not, the code will create the 
html file based off the unique number id of the specific comaprison that will 
be used as a base file that can load other html files into it. The code will then 
calculate how the blocks of codes that are similar. Next the code will create the 
html file that displays the table with the line number blocks. Next the HTML files 
of the file on the left and right side are created one after another. This is done 
by reading the file, attaching the necessary html syntax, and checking each 
line if it should be the start or end of the highlighting. 

The reason for why there is a base html file that calls the other created 
html files is that it is similar to how MOSS does it and it allows clicking on 
the blocks in the table and jumping to the specific line in the corresponding 
file if the file is big enough to support that.